(* optimize.n 5/1/2015 *)

`Simplex;
SetAttributes[{`MinimumSize,`ExpansionRatio,`TryReflect,`Persistence,`QuickShrink,
  `ExtendLevel,`ContractLevel,`ReflectRange,`WeightExponent},Constant];

BeginPackage[Optimize`,Global`]

Begin[Optimize`];

Simplex=Class[{},{},{CurrentSimplex,Status="Stop",
  limit,n,lo,tol,per,minq,exp,cont,quick,exl,cl,rr={1,-1},wexp},

  Amoebar[p_,f_,r_,kr_]:=Module[
    {pr,fr,tp=Take[p[[,2]],rr]},
    tp=Plus@@(wexp*tp);
    pr=MapThread[Restrict,{(1-r)*tp+p[[kr,2]]*r,limit[[1]],limit[[2]]}];
    {pr,fr=f[pr],
      If[fr<p[[kr,1]],
        Sort[ReplacePart[p,{fr,pr},kr]],
        p]}];

  Amoeba[p_,f_]:=Module[
    {p0=p,pr,pr1,pl,fr,fr1,prr,n,kr,fr0,pr0,pt,lp=Length[p]},
    Do[
      Status=StandardForm["Reflect "//kr];
      {pt,fr,pr}=Amoebar[p,f,-1,-kr];
(*      Print["dh1 ",{fr,p[[exl,1]]}]; *)
      If[kr==1,fr0=fr;pr0=pr];
      If[fr <= p[[exl,1]],
        Status="Extend";
        {pt,fr1,pr1}=Amoebar[p,f,-exp,-kr];
        Return[If[fr1 <= fr,
          pr1,
          pr]]],
      {kr,cont}];
    If[cont<>1,fr=fr0;pr=pr0];
    If[lp>2 && fr < p[[-1-cl,1]],
      pr,
      If[fr < p[[-1,1]],
        Status="Contract+",
        Status="Contract-"];
      {pt,fr1,pr1}=Amoebar[pr,f,0.5,-1];
      If[fr1 < pr[[-1-cl,1]],
        pr1,
        If[fr<fr1,
          If[fr <p0[[-1,1]],p0=pr ],
          If[fr1<p0[[-1,1]],p0=pr1]];
        pl=p0[[1,2]];
        prr=Thread[(pl+Thread[Drop[pr0,1][[,2]]])/2];
        prr=(MapThread[(If[#2<#<#3,(#>#4)*(#3-#2)+#2,#])&,
          {#,pl-minq,pl+minq,pl}]&/@prr);
        Do[
          Status=StandardForm["Shrink "//n];
          fv=f[prr[[n-1]]];
          p0[[n]]={fv,prr[[n-1]]};
          If[quick && (fv<p0[[n-1,1]] || fv>p0[[-1,1]]),
            Break[]],
          {n,lp,2,-1}];
        If[per<>1,
          p0[[1]]={p0[[1,1]]*per+f[pl]*(1-per),pl}];
        Sort[p0]]]];

  DownhillSimplex[p0_,f_,opt___]:=Module[
    {def={VariableRange:>{Table[Max[],{Length[p0[[1,2]]]}],
      Table[Min[],{Length[p0[[1,2]]]}]},
      MaxIteration:>Max[100,10*Length[p0]],
      ExtendLevel->1,ContractLevel->1,ReflectRange->{1,-1},
      Output->6,MinimumSize->0,ExpansionRatio->2,TryReflect->1,
      WeightExponent->0,
      Tolerance->1e-6,Persistence->1,QuickShrink->0},
      lo,p=Sort[p0],nc=Floor[(PageWidth-3)/22],we,lrr},
    {limit,n,lo,tol,per,minq,exp,cont,quick,exl,cl,rr,we}=
      {VariableRange,MaxIteration,Output,
        Tolerance,Persistence,MinimumSize,ExpansionRatio,TryReflect,QuickShrink,
        ExtendLevel,ContractLevel,ReflectRange,WeightExponent}/.{opt}/.def;
    Write[lo,"DownhillSimplex {limit, Option}: ",{limit,opt}];
    lrr=Length[Take[p,rr]];
    wexp=Exp[-(we/lrr)*Range[lrr]];
    wexp/=(Plus@@wexp);
    CurrentSimplex=p;
    exl=Restrict[exl,1,Length[p]];
    cont=Restrict[cont,1,Length[p]];
    Check[
      Catch[
        Do[CurrentSimplex=p=Amoeba[p,f];
          If[lo > 0, StandardForm[
            $FORM='10.6';
            Write[lo,Drop[p,{nc+1,Length[p0]-nc}][[,1]]]]];
          If[(p[[-1,1]]-p[[1,1]])/(1e-100+Abs[p[[-1,1]]]+Abs[p[[1,1]]]) < tol,
            Break[]],{n}]],];
    Status="Stop";
    CurrentSimplex];

  ];

FindCOD=Class[{},{},{ax,bx,ay,by,p0,NDiv=300,MaxAmp=2e-2},

  DiffCOD[z_]:=Module[{dz,r},
    {DXI,DPXI,DYI,DPYI}=z;
    FFS["CALC4D;CELL;CALC NOEXP;"];
    If[?STABLE,Throw[0]];
    dz=Twiss[{"DX","DPX","DY","DPY"},"$$$"]-z;
    r=dz[[1]]^2/bx+bx*(dz[[2]]+ax/bx*dz[[1]])^2
    +dz[[3]]^2/by+by*(dz[[4]]+ay/by*dz[[3]])^2;
    If[NaNQ[r],1e100,r]];
  
  Find[z0_List:{0,0,0,0},opt___]:=Module[{z1,dz,v,p0,p1,out},
    out=Output/.{opt}/.Output->0;
!    FFS["RESET ALL;"];
    {DXI,DPXI,DYI,DPYI}=z0;
    FFS["CALC4D;INS;CAL NOEXP;"];
    {ax,bx,ay,by}=Twiss[{"AX","BX","AY","BY"},1];
    z1=Twiss[{"DX","DPX","DY","DPY"},"$$$"];
    dz=Restrict[z1-z0,-MaxAmp,MaxAmp]/NDiv;
    v=Prepend[Table[ReplacePart[z0,z0[[i]]+dz[[i]],i],{i,4}],z0];
    Catch[
      p0=Sort[Thread[{DiffCOD/@v,v}]];
      p1=`DownhillSimplex[p0,DiffCOD,Output->out,opt]];
    If[~?STABLE,
      {DXI,DPXI,DYI,DPYI}=p1[[1,2]];
      FFS["CELL;CAL NOEXP;"]];
    {?STABLE,Subtract@@[Twiss[{"DX","DPX","DY","DPY"},{"$$$","^^^"}],{1}]}
    ];

  ];

End[];

EndPackage[];

Clear[The$Simplex];
The$Simplex=Simplex[];
SetAttributes[The$Simplex,Dynamic];

DownhillSimplex=The$Simplex@DownhillSimplex;
Amoebar=The$Simplex@Amoebar;
Amoeba=The$Simplex@Amoeba;

SetAtributes[{DownhillSimplex,Amoebar,Amoeba,Simplex},Constant];

Clear[Find$COD,FindClosedOrbit];
Find$COD=Optimize`FindCOD[];
FindClosedOrbit=Find$COD@Find;
SetAttributes[Find$COD,Dynamic];

CalculateMatching[v_,vlist_]:=Module[{},
  Scan[(Element[#[[1,2]],#[[1,1]]]=#[[2]])&,Thread[{vlist,v}]];
  Optimize$Function[]];

Default$Optimize$Function=((FFS["CALC"];1+MatchingResidual)&);

SetupOptimize[size_,f_,p0_]:=Module[
  {vl,limit,vnamekey,vzero,p},
  vl=Transpose[Select[FFS["VAR"],(#[[8]]==#[[1]]||#[[8]]==#[[1]]//".1"||#[[8]]=="")&]];
  limit={vl[[6]],vl[[7]]};
  OptimizeVlist=Transpose[{vl[[1]],vl[[2]]}];
  If[p0===Null,
     vzero=MapThread[Max,{limit[[1]],
             MapThread[Min,{limit[[2]],vl[[3]]}]}];
     p=Table[vzero,{Length[vzero]+1}];
     Do[If[p[[i,i]]-limit[[1,i]]<limit[[2,i]]-p[[i,i]],
           p[[i,i]]=Min[limit[[2,i]],p[[i,i]]+Max[1e-5,Abs[size*p[[i,i]]]]],
          p[[i,i]]=Max[limit[[1,i]],p[[i,i]]-Max[1e-5,Abs[size*p[[i,i]]]]]],
        {i,Length[vzero]}];
     {Sort[Map[{f[#],#}&,p]],limit},
    {p0,limit}]
  ];

OptimizeOptics[opt___]:=Module[
  {def={SimplexSize->0.03,
        OptimizeFunction->Default$Optimize$Function,
        InitialSimplex->Null},
  f,p,limit},
  If[Length[FFS["VAR"]]<1,
    Message[OptimizeOptics::novariables]; Return[$Failed]];

  f=CalculateMatching[#,OptimizeVlist]&;
  Optimize$Function=OptimizeFunction/.{opt}/.def;
  p=InitialSimplex/.{opt}/.def;
  {p,limit}=SetupOptimize[SimplexSize/.{opt}/.def,f,p];
  p=DownhillSimplex[p,f,Join[{opt},{VariableRange->limit}]];
  f[p[[1,2]]];
  p
];

OptimizeOptics::novariables="No matching variables";


Protect[CalculateMatching,SetupOptimize,OptimizeOptics];



