(*   Class V1.0.8.19b 7/28/2004   *)

BeginPackage[Class`]

Begin[Class`]

InstanceID=0;
ParentClass[_]=MemberSymbol[_]=MethodDefinition[_]=
  VarSymbol[_]=UpValueDefinition[_]=HeldMethods[_]={};
InstanceVar[_]=False;
InstanceSymbols[_]=Hold[];

MethodSymbol[c_,Hold[This/:_:=_]]:=Null[];
MethodSymbol[c_,Hold[f_/:_:=_]]:=ToContext[c,f];
MethodSymbol[c_,Hold[f_[___]:=_]]:=ToContext[c,f];
MethodSymbol[c_,Hold[(_[f_[___],___])^:=_]]:=ToContext[c,f];
MethodSymbol[c_,Hold[This/:_=_]]:=Null[];
MethodSymbol[c_,Hold[f_/:_=_]]:=ToContext[c,f];
MethodSymbol[c_,Hold[f_[___]=_]]:=ToContext[c,f];
MethodSymbol[c_,Hold[(_[f_[___],___])^=_]]:=ToContext[c,f];
MethodSymbol[c_,Hold[With[_,l_]]]:=MethodSymbol[c,Hold[l]];
MethodSymbol[c_,Hold[CompoundExpression[l__]]]:=
  List@@(MethodSymbol[c,#]&/@(Hold/@Hold[l]));
MethodSymbol[c_,Hold[If[_,l__]]]:=
  List@@(MethodSymbol[c,#]&/@(Hold/@Hold[l]));
MethodSymbol[__]:=Null[];

AllParents[c_]:=With[{p=ParentClass[c]},
  AllParents[c]=If[p==={},{},
    Override[Flatten[{p,AllParents/@p}]]]];

Family[c_]:=(Family[c]=Prepend[AllParents[c],c]);
      
SetMemberOption[a:c_[_],(Rule|RuleDelayed)[m_,v_]]:=Function[
  l$$$,a@l$$$=With[{This=a},Unevaluated$[v]]][ToContext[c,m]];

MemberObject2[x_][c_,y_]:=Module[{s},
  With[{r=MemberObject[
    If[Position[Family[c],Context[y],1,1]==={},
      ToContext[c,y],
      Unevaluated$[y]]][x,c]},
    If[r<=>Undefined,
      If[Head[s=MemberObject2[x]]<=>Symbol,
        s=ObjectSymbol[c];
        MemberObject2[x]=s;
        With[{s},
          SetAttributes[s,HoldAll];
          s[c$_,y$_]:=With[{
            r$=MemberObject[
              If[Position[Family[c$],Context[y$],1,1]==={},
                ToContext[c$,y$],
                Unevaluated$[y$]]][x,c$]},
            If[r$<=>Undefined,
              s[c$,y$]=r$,Undefined]];
          s[c,y]=r],
        With[{s},s[c,y]=r]],
      Undefined]]];

MemberObject[v_][xx_,c_]:=(
  If[Context[v]===c,
    If[InstanceVar[v],
      With[{s=ObjectSymbol[c],d=DefaultValue[v]},
        If[d<=>Undefined,s=d];
        Return[MemberObject[v][xx,c]=Hold[s]]],
      MemberScan[xx,v,ParentClass[c],True]],
    MemberScan[xx,v,ParentClass[c],False]];
  Undefined);
MemberObject[_][__]=Undefined;

With[{Define[a$$_]:=(
  AppendTo[MethodDefinition[v],
    ReplaceMember[a$$,r]];
  MethodDefinition[v];
  MemberObject[v][x$_,c$_]:=With[{ss=ObjectSymbol[c$]},
    MemberObject[v][x$,c$]:=Hold[ss];
    ss:=(ss=.;Scan[(AssignMethod[ss,#,x$])&,MethodDefinition[v]];ss);
    Hold[ss]])},

  DefineMethod[c_,r_,Hold[This/:b_:=g_]]:=
    With[{h=(This/:b)/.This->aa$},
      AppendTo[UpValueDefinition[c],
        ReplaceMember[Hold[h:=g]/.(k:Literal)[This]->aa$,r]]];
  DefineMethod[c_,r_,Hold[f_/:b_:=g_]]:=
    With[{v=ToContext[c,f],h=(s/:b)/.f->s},Define[Hold[h:=g]]];
  DefineMethod[c_,r_,Hold[f_[arg___]:=g_]]:=
    With[{v=ToContext[c,f]},
      Define[Hold[s[arg]:=g]/.This->cx$[x$]]];
  DefineMethod[c_,r_,Hold[h_[f_[arg___],b___]^:=g_]]:=
    With[{v=ToContext[c,f]},Define[Hold[s/:h[s[arg],b]:=g]]];
  
  DefineMethod[c_,r_,Hold[This/:b_=g_]]:=
    With[{h=(This/:b)/.This->aa$},
      AppendTo[UpValueDefinition[c],
        ReplaceMember[Hold[h=g]/.(k:Literal)[This]->aa$,r]]];
  DefineMethod[c_,r_,Hold[f_/:b_=g_]]:=
    With[{v=ToContext[c,f],h=(s/:b)/.f->s},Define[Hold[h=g]]];
  DefineMethod[c_,r_,Hold[f_[arg___]=g_]]:=
    With[{v=ToContext[c,f]},
      Define[Hold[s[arg]=g]/.This->cx$[x$]]];
  DefineMethod[c_,r_,Hold[h_[f_[arg___],b___]^=g_]]:=
    With[{v=ToContext[c,f]},Define[Hold[s/:h[s[arg],b]=g]]];

  DefineMethod[c_,r_,Hold[CompoundExpression[d__]]]:=
    Scan[Function[{a},DefineMethod[c,r,Hold[a]]],Hold[d]];

  DefineMethod[c_,r_,Hold[With[l_,CompoundExpression[d__]]]]:=
    Scan[Function[{a},DefineMethod[c,r,Hold[With[l,a]]]],Hold[d]];
  DefineMethod[c_,r_,Hold[With[l_,f_[arg___]:=g_]]]:=
    With[{v=ToContext[c,f]},
      Define[Hold[With[l,s[arg]:=g]]/.This->cx$[x$]]];
  DefineMethod[c_,r_,Hold[With[l_,f_[arg___]=g_]]]:=
    With[{v=ToContext[c,f]},
      Define[Hold[With[l,s[arg]=g]]/.This->cx$[x$]]];

  DefineMethod[c_,r_,Hold[If[l_,true_,false_]]]:=(
    DefineMethod[c,r,Hold[If[l,true]]];
    DefineMethod[c,r,Hold[If[~l,false]]]);
  DefineMethod[c_,r_,Hold[If[l_,CompoundExpression[d__]]]]:=
    Scan[Function[{a},DefineMethod[c,r,Hold[If[l,a]]]],Hold[d]];
  DefineMethod[c_,r_,Hold[If[l_,f_[arg___]:=g_]]]:=
    With[{v=ToContext[c,f]},
      Define[Hold[If[l,s[arg]:=g]]/.This->cx$[x$]]];
  DefineMethod[c_,r_,Hold[If[l_,f_[arg___]=g_]]]:=
    With[{v=ToContext[c,f]},
      Define[Hold[If[l,s[arg]=g]]/.This->cx$[x$]]];

  ];

AssignMethod[s1_,Hold[g1_],x1_]:=(
  With[{s:=s1,cx$=Class[x1],x$:=x1},g1]);

AssignUpValues[c_,,x_]:=Scan[
  Function[{y},With[{aa$:=c[x],cx$=c,x$=x},ReleaseHold[y]]],
  UpValueDefinition[c]];
AssignUpValues[c_,a_,x_]:=Scan[
  Function[{y},With[{aa$:=a,cx$=c,x$=x},ReleaseHold[y]]],
  UpValueDefinition[c]];
AssignUpValues[c_,a_[k___],x_]:=With[{m=k},Scan[
  Function[{y},With[{aa$:=a[m],cx$=c,x$=x},ReleaseHold[y]]],
  UpValueDefinition[c]]];

SetAttributes[{ExtractVar,DefineObject,AssignUpValues,DefaultValue,
  InstanceVar,AssignVar},HoldAll];

ExtractVar[c_,v_Symbol]:={ToContext[c,v],Undefined};
ExtractVar[c_,{v__}={x__}]:=Null@@Thread[{
  List@@(ToContext[c,#]&/@Hold[v]),
  {x}}];
ExtractVar[c_,{v__}:={x__}]:={
  List@@(ToContext[c,#]&/@Hold[v]),Hold[x]};
ExtractVar[c_,v_=x_]:={ToContext[c,v],x};
ExtractVar[c_,v_:=x_]:={ToContext[c,v],Hold[x]};
ExtractVar[c_,v__=x_]:=Thread[List@@({ToContext[c,#],x}&/@Hold[v])];

AssignClassVar[c_,v_Symbol,x_]:=DefineObject[c,v,x];
AssignClassVar[c_,v_Symbol,Hold[x_]]:=DefineObject[c,v,x];
AssignClassVar[c_,v_List,Hold[x__]]:=ScanThread[
  AssignClassVar[c,##]&,{v,{x}}];
AssignClassVar[c_,v_List,x_List]:=ScanThread[
  AssignClassVar[c,##]&,{v,x}];

AssignVar[v_Symbol,Hold[x_]]:=(DefaultValue[v]:=x);
AssignVar[v_Symbol,x_]:=(DefaultValue[v]:=x);
AssignVar[v_Symbol,Undefined]:=Null
AssignVar[v_List,Hold[x__]]:=ScanThread[AssignVar,{v,{x}}];
AssignVar[v_List,x_List]:=ScanThread[AssignVar,{v,x}];

DefaultValue[_]=Undefined;

DefineObject[c_,v_,Undefined]:=
  With[{s=ObjectSymbol[c]},
    MemberObject[v][_,c]=MemberObject[v][c,c]=Hold[s]];
DefineObject[c_,v_,x_]:=
  With[{s=ObjectSymbol[c]},
    MemberObject[v][_,c]=MemberObject[v][c,c]=Hold[s];s=x];

ClassName[c_[c_]]:=Class[c];
ClassName[c_]:=c;

(c1_ = Class[parents_,classv:{___},instv:{___},CompoundExpression[me__]])^:=(
  c1 = Class[parents,classv,instv,{me}]);
(c1_ = Class[parents_,classv:{___},instv:{___},me___])^:=(
  c1 = Class[parents,classv,instv,{me}]);
(c1_ = Class[parents_,{classv___},{instv___},
  {methods___}])^:=Module[
    {heldmethods=Hold/@Hold[methods],classm,instm,calsss,insts,mets,
      c=ToContext[c1,]},
    c1=c[c];
    Class[c]=c;
    ParentClass[c]=
      Switch[parents,
        {},
        {Object`},
        {None}|None,
        {},
        _,
        ClassName/@parents];
    With[{c},
      instm=Function[{a},ExtractVar[c,a]]/@Hold[instv];
      insts=Flatten[instm[[,1]]];
      classm=Function[{a},ExtractVar[c,a]]/@Hold[classv];
      classs=Flatten[classm[[,1]]];
      HeldMethods[c]=heldmethods;
      mets=Flatten[List@@(MethodSymbol[c,#]&/@heldmethods)];
!      Print["Class-0.3 ",{Family[c],?MemberSymbol,List@@(MethodSymbol[c,#]&/@heldmethods),mets}];
      Scan[Function[{m},InstanceVar[m]=True],insts];
      MemberSymbol[c]=Override[VarSymbol[c]=Override[insts,classs],mets];
!      Print["Class-0.5 ",{Family[c],?MemberSymbol,insts,classs,mets,heldmethods}];
      AssignVar@@[instm,{1}];
      AssignClassVar[c,##]&@@[classm,{1}];
      UpValueDefinition[c]=Flatten[UpValueDefinition/@
        Reverse[AllParents[c]]];
      (a_=c[x_])^:=(
        AppendTo[InstanceSymbols[x],Unevaluated$[a]];
        AssignUpValues[c,a,x];
        $CompileCount++;
        a:=c[x]);
      With[{allmember=Override[
        Flatten[MemberSymbol/@Family[c]]],
        allv=Override[Flatten[VarSymbol/@Family[c]]]},
        Scan[DefineMethod[c,allmember,#]&,
          Flatten[HeldMethods/@Reverse[Family[c]],1,Hold]];
        (a_=c[c][param___])^:=Module[
          {{opt,opt1,p1}=Function[{m},SwitchCases[Hold/@Hold[param],
            {Hold[(Rule|RuleDelayed)[m,_]],
              Hold[_Rule|_RuleDelayed],_}]][
                With[{m=(ToContext[,#,Wrap->Unevaluated$]&/@allv)},
                  Alternatives@@Unevaluated$[m]]]},
          p1=ReleaseHold/@p1;
          opt=ReleaseHold/@MapAt[ToContext[c,#]&,opt,{,1,1}];
          Class[++InstanceID]=c;
          a=c[InstanceID];
          With[{id=InstanceID},
            AssignUpValues[c,,id]];
          Scan[SetMemberOption[a,#]&,opt];
          If[opt1<=>{},a@Options=ReleaseHold/@opt1];
          Function[{f$$},a@f$$[]][ToContext[c,Constructor$]];
          Function[{f$$},a@f$$@@p1][ToContext[c,Constructor]]
          ]
        ];
      ];
    $CompileCount++;
    c1];
(c1_=Class[])^:=Module[{c=ToContext[c1,]},
  c1=c[c]];

Class::undef="Undefined member `1`";

SetAttributes[Class,HoldRest];
SetAttributes[{Clone,ClearDefinition},HoldAll];
ClearDefinition[Hold[f_:=Hold[g_]]]:=(f=.;Clear[g]);

End[];

EndPackage[];

BeginPackage[Object`]

Begin[Object`]

Object=Class[{None},{},{Options={}},
  With[{c=Literal[Class][First[This]]},
    Class[]:=c;
    Members[]:=Class`MemberSymbol[c];
    AllMembers[]:=Flatten[Class`MemberSymbol/@
      Prepend[AllParents[],c]];
    Parents[]:=Class`ParentClass[c];
    AllParents[]:=Class`AllParents[c]];
  Print[x__:This]:=Literal[Print][x];
  Short[x_:This]:=Literal[Short][x,3];
  Constructor$[]:=(SetAttributes[{Print,Short},HoldAll]);
  Destructor$[]:=With[
    {x=First[This],
      s=Class`MemberObject2[First[This]]},
    Literal[Class][x]=.;
    Clear[This];
    Class`MemberObject2[x]=.;
    Class`ClearMemberObject[s];
    Class`MemberObject[x]=.;
    Clear/@Class`InstanceSymbols[x];
    Class`InstanceSymbols[x]=.;
    $CompileCount++];
  This/:(This=.):=With[{b=This},
    b@Destructor[];
    b@Destructor$[];
    Clear[Literal[This]]
    ];
  ];

End[];

EndPackage[];
