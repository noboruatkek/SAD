(* Tkinter 1.1.1.15.3 11/1/2018 *)

If[Not[FBoundQ$[TclArg]], Library@Require["SAD/Tkinter"]];

Tkinter$Names0 = Names["*"];

Tk$DefCount=0;
SetAttributes[Widget,HoldAll];
Root$Window=Widget[Unevaluated[Root$Window],Null];
SetAttributes[TkSymbol,HoldAll];
TkSymbol[Root$Window]="Root$Window";
TkSymbol[x_]:=(TkSymbol[x]=If[Head[x]===Widget,
  Function[a,TkSymbol[a]][Extract[x,{1},Unevaluated$]],
  "s"//BaseForm[++Tk$DefCount,36]]);

(*
Switch[$FontSystem,
  "Xft",
  TclOpts[opts_]:=StringJoin@@((TkOptionLabel[#]//" "//TclUnicode[TclArg1[#2]])&@@[opts,{1}]),
  _,
  TclOpts[opts_]:=StringJoin@@((TkOptionLabel[#]//" "//TclArg1[#2])&@@[opts,{1}])
  ];
*)

Off[General::unprotconst];
Unprotect[Scale,Insert];
Widgets=Join[
  {Frame, Window, LabelFrame},				(* tkFrame.c *)
  {PanedWindow},					(* tkPanedWindow.c *)
  {TextLabel, Button, CheckButton, RadioButton},	(* tkButton.c *)
  {MenuButton},						(* tkMenubutton.c *)
  {Entry, SpinBox},					(* tkEntry.c *)
  {ListBox},						(* tkListbox.c *)
  {Scale},						(* tkScale.c *)
  {ScrollBar},						(* tkScrollbar.c *)
  {Canvas},						(* tkCanvas.c *)
  {TextEditor},						(* tkText.c *)
  {TextMessage},					(* tkMessage.c *)
  {Menu},						(* tkMenu.c *)
  {OptionMenu},						(* optMenu.tcl *)
  Null[]];
!Clear[X,Y,FG,BD];
Focus$Set=Focus;
SetAttributes[Focus$Set,Constant];

Options[Pack]=Alternatives[
  Anchor, After,Before, Expand, Fill, GM, In, IPadX, IPadY, PadX, PadY, Side,

  (* for Place *)
  BorderMode, PlaceHeight, PlaceWidth, RelHeight, RelWidth, RelX, RelY, X, Y,

  (* for Grid *)
  Column, ColumnSpan, Row, RowSpan, Sticky];
Options[FrameCommon]=Alternatives[Background, BG, Colormap, Container,
  Cursor, Height,
  HighlightBackground, HighlightColor, HighlightThickness, (* PadX, PadY, *)
  TakeFocus, Visual, Width];
Options[Frame]=Join[Options[FrameCommon], Alternatives[
  BD, BorderWidth, (* Class, *) Relief]];
Options[Window]=Join[Options[FrameCommon], Alternatives[
  BD, BorderWidth, (* Class, *) Menu, Relief, Screen, Use]];
Options[LabelFrame]=Join[Options[FrameCommon], Alternatives[
  BD, BorderWidth, (* Class, *) FG, Font, AltFont, ScriptFont, AltScriptFont,
  Foreground, LabelAnchor, LabelWidget, Relief, Text]];
Options[PanedWindow]=Union[Alternatives[
  Background, BD, BG, BorderWidth, Cursor, HandlePad, HandleSize,
  Height, OpaqueResize, Orient, Relief,
  SashCursor, SashPad, SashRelief, SashWidth, ShowHandle, Width,
  (* Slave options... *)
  After, Before, Height, Hide, MinSize, (* PadX, PadY, *)
  Sticky, Stretch, Width]];
Options[TextLabel]=Alternatives[ActiveBackground, ActiveForeground,
  Background, BD, BG, Bitmap, BorderWidth, Compound, Cursor,
  DisabledForeground, FG, Font, AltFont, ScriptFont, AltScriptFont, Foreground,
  Height, HighlightBackground, HighlightColor, HighlightThickness,
  Justify, Picture, Relief, Rotation, State, TakeFocus, Text,
  TextAnchor, TextPadX, TextPadY, Underline, Width, WrapLength];
Options[Button]=Join[Options[TextLabel], Alternatives[
  Default, RepeatDelay, RepeatInterval]];
Options[CheckButton]=Join[Options[TextLabel], Alternatives[
  IndicatorOn, OffRelief, OffValue, OnValue, OverRelief,
  SelectColor, SelectImage],
  If[Tk$MajorVersion > 8 || Tk$MajorVersion == 8 && Tk$MinorVersion >= 5,
    Alternatives[TristateImage, TristateValue], Alternatives[]]];
Options[RadioButton]=Join[Options[TextLabel], Alternatives[
  IndicatorOn, OffRelief, OverRelief,
  SelectColor, SelectImage, Value],
  If[Tk$MajorVersion > 8 || Tk$MajorVersion == 8 && Tk$MinorVersion >= 5,
    Alternatives[TristateImage, TristateValue], Alternatives[]]];
Options[MenuButton]=Alternatives[ActiveBackground, ActiveForeground,
  Background, BD, BG, Bitmap, BorderWidth, Compound, Cursor,
  Direction, DisabledForeground, FG,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, Height, HighlightBackground, HighlightColor, HighlightThickness,
  IndicatorOn, Justify, Menu, Picture, Relief, (* Rotation, *)
  State, TakeFocus, Text, TextAnchor, TextPadX, TextPadY,
  Underline, Width, WrapLength];
Options[Entry]=Alternatives[
  Background, BD, BG, BorderWidth,
  Cursor, DisabledBackground, DisabledForeground, ExportSelection, FG,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, HighlightBackground, HighlightColor, HighlightThickness,
  Insertbackground, InsertBorderWidth, InsertOffTime, InsertOnTime,
  InsertWidth, Justify, ReadOnlyBackground, Relief, (* Rotation, *)
  SelectBackground, SelectBorderWidth, SelectForeground,
  ShowText, State, TakeFocus, Validate, Width];
Options[SpinBox]=Alternatives[ActiveBackground,
  Background, BD, BG, BorderWidth,
  ButtonBackground, ButtonCursor, ButtonDownRelief, ButtonUpRelief,
  Cursor, DisabledBackground, DisabledForeground, ExportSelection, FG,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, Format, From,
  HighlightBackground, HighlightColor, HighlightThickness,
  Increment, Insertbackground, InsertBorderWidth, InsertOffTime, InsertOnTime,
  InsertWidth, Justify, ReadOnlyBackground, Relief, (* Rotation, *)
  RepeatDelay, RepeatInterval,
  SelectBackground, SelectBorderWidth, SelectForeground,
  State, TakeFocus, To, Validate, Width, Wrap];
Options[ListBox]=Alternatives[ActiveStyle,
  Background, BD, BG, BorderWidth,
  Cursor, DisabledForeground, ExportSelection, FG,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, Height, HighlightBackground, HighlightColor, HighlightThickness,
  Relief, (* Rotation, *)
  SelectBackground, SelectBorderWidth, SelectForeground,
  SelectMode, SetGrid, State, TakeFocus, Width];
Options[Scale]=Alternatives[ActiveBackground,
  Background, BigIncrement, BD, BG, BorderWidth, Cursor, FG,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, From, HighlightBackground, HighlightColor, HighlightThickness,
  Label, Length, Orient, Relief, RepeatDelay, RepeatInterval, Resolution,
  ShowValue, SliderLength, SliderRelief, State, TakeFocus,
  TickInterval, To, TroughColor, Width];
Options[ScrollBar]=Alternatives[ActiveBackground, ActiveRelief,
  Background, BD, BG, BorderWidth, Cursor, ElementBorderWidth,
  HighlightBackground, HighlightColor, HighlightThickness, Jump, Orient,
  Relief, RepeatDelay, RepeatInterval, TakeFocus, TroughColor, Width];
Options[Canvas]=Alternatives[
  Background, BD, BG, BorderWidth, CloseEnough, Confine, Cursor, Height,
  HighlightBackground, HighlightColor, HighlightThickness,
  InsertBackground, InsertBorderWidth, InsertOffTime, InsertOnTime,
  InsertWidth, Offset, Relief, ScrollRegion,
  SelectBackground, SelectBorderWidth, SelectForeground, State,
  SuppressDrawing, TakeFocus, Width, XScrollIncrement, YScrollIncrement];
Options[TextEditor]=Join[Alternatives[AutoSeparators,
  Background, BD, BG, BorderWidth, Cursor, ExportSelection, FG,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, Height, HighlightBackground, HighlightColor, HighlightThickness,
  InsertBackground, InsertBorderWidth,
  InsertOffTime, InsertOnTime, InsertWidth, MaxUndo,
  Relief, SelectBackground, SelectBorderWidth, SelectForeground,
  SetGrid, Spacing1, Spacing2, Spacing3,
  State, Tabs, TakeFocus, (* TextPadX, TextPadY, *)
  Undo, Width, Wrap],
  If[Tk$MajorVersion > 8 || Tk$MajorVersion == 8 && Tk$MinorVersion >= 5,
    Alternatives[BlockCursor, EndLine, InactiveSelectBackground,
      StartLine, TabStyle], Alternatives[]]];
Options[TextMessage]=Alternatives[Aspect,
  Background, BD, BG, BorderWidth, Cursor, FG,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, Height, HighlightBackground, HighlightColor, HighlightThickness,
  Justify, Relief, TakeFocus,
  Text, TextAnchor, (* TextPadX, TextPadY, *) Width];
Options[Menu]=Alternatives[
  ActiveBackground, ActiveBorderWidth, ActiveForeground,
  Background, BD, BG, BorderWidth, Cursor, Disabledforeground, FG,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, Relief, SelectColor, TakeFocus, TearOff, Title, Type];
Options[MenuEntry]=Union[Alternatives[
  (* Basic MenuEntry options *)
  ActiveBackground, ActiveForeground, Accelerator,
  Background, Bitmap, ColumnBreak, Compound,
  Font, (* AltFont, ScriptFont, AltScriptFont, *)
  Foreground, Justify, HideMargin, Label, Picture, State, Text, Underline,
 
  (* Separator MenuEntry options *)
  Background,

  (* CheckButton MenuEntry options *)
  IndicatorOn, OffValue, OnValue, SelectColor, SelectImage,

  (* RadioButton MenuEntry options *)
  IndicatorOn, SelectColor, SelectImage, Value,

  (* Cascade MenuEntry options *)
  (* Menu, *)

  (* Tearoff MenuEntry options *)
  Background, State,

  Null[]]];
Options[OptionMenu]=Options[MenuButton];
Options[_]=None;

AllOptions:=Union[List@@Flatten[
  Options[Pack]|Options[MenuEntry]|Alternatives@@(Options/@Widgets)]];
TkOptionLabel[x_]:=StandardForm[TkOptionLabel[x]=ToLowerCase[" -"//x//" "]];
TkOptionLabel[TextAnchor]=" -anchor ";
TkOptionLabel[TextPadX]=" -padx ";
TkOptionLabel[TextPadY]=" -pady ";
TkOptionLabel[ShowText]=" -show ";
TkOptionLabel[Picture]=" -image ";
TkOptionLabel[PlaceHeight]=" -height ";
TkOptionLabel[PlaceWidth]=" -width ";
Unprotect@@AllOptions;
SetAttributes[Evaluate[AllOptions],Constant];
(CGetOptions[#]=DeleteCases[Options[#],TextAnchor|Type,1])&/@Widgets;

With[{r=Rule|RuleDelayed},
  TkOptionReplace[opt$___] := Module[{font},
    {font} = SwitchCases[Override[opt$],
      {r[Font, _]}];
    If[font <=> {}, font = AltFonts[font[[1,2]]]];
    Override[opt$, font]]];

(* TK_CONFIG_BOOLEAN *)
TclReturnForm[Confine|Jump|Prolog|Rotate, _] := Real;

(* TK_CONFIG_DOUBLE *)
TclReturnForm[CloseEnough|Extent|Gamma|Start, _] := Real;

(* TK_CONFIG_INT *)
TclReturnForm[Height|InsertOffTime|InsertOnTime
  |RemoveLastDescent|RepeatDelay|RepeatInterval|Rotation
  |SplineSteps|SuppressDrawing|Underline|UseBG|Width, _] := Real;

(* TK_CONFIG_PIXELS *)
TclReturnForm[BorderWidth|DashOffset|DisabledWidth|ElementBorderWidth
  |Height|HighlightThickness|InsertBorderWidth|InsertWidth
  |SelectBorderWidth|Width|X|XScrollIncrement|Y|YScrollIncrement, _] := Real;

(* TK_OPTION_BOOLEAN *)
TclReturnForm[AutoSeparators|ColumnBreak|Container|ExportSelection
  |Hide|HideMargin|IndicatorOn|OpaqueResize|SetGrid|ShowHandle|ShowValue
  |Stretch|TearOff|Undo|Wrap, _] := Real;
If[Tk$MajorVersion > 8 || Tk$MajorVersion == 8 && Tk$MinorVersion >= 5,
  TclReturnForm[BlockCursor, _] := Real];

(* TK_OPTION_DOUBLE *)
TclReturnForm[BigIncrement|From|Increment|RelHeight|RelWidth|RelX|RelY
  |Resolution|TickInterval|To, _] := Real;

(* TK_OPTION_INT *)
TclReturnForm[Aspect|Height|InsertOffTime|InsertOnTime|MaxUndo
  |RepeatDelay|RepeatInterval|Rotation|Underline|Width, _] := Real;

(* TK_OPTION_PIXELS *)
TclReturnForm[ActiveBorderWidth|BD|BorderWidth|HandlePad|HandleSize|Height
  |HighlightThickness|InsertBorderWidth|InsertWidth|Length|MinSize
  |PadX|PadY|SashPad|SashWidth|SelectBorderWidth|Size|SliderLength
  |Spacing1|Spacing2|Spacing3|TextPadX|TextPadY|Width|WrapLength
  |X|Y, _] := Real;

(* TK_OPTION_WINDOW *)
TclReturnForm[LabelWidget, LabelFrame] := Widget;
TclReturnForm[After|Before, PanedWindow] := Widget;
TclReturnForm[Window, _] := Widget;

(* tkPack.c *)
TclReturnForm[In, _] := Widget;
TclReturnForm[Expand|IPadX|IPadY|PadX|PadY, _] := Real;

(* Actions *)
TclReturnForm[Frame|Index|OverrideRedirect|Select$Present, _] := Real;
TclReturnForm[BBox|Coords|Find$Above|Find$All|Find$Below|Find$Closest
  |Find$Enclosed|Find$Overlapping|Find$WithTag|ScrollRegion, _] := List;
TclReturnForm[XView, Entry|SpinBox] := List;
TclReturnForm[XView|YView, Canvas|ListBox|TextEditor] := List;
TclReturnForm[Get, Scale] := Real;
TclReturnForm[Get, ScrollBar] := List;
TclReturnForm[Tag$Names, _] := StringList;
TclReturnForm[GetTags, _] := StringList;
TclReturnForm[Tag$Ranges, _] := TextIndexList;
TclReturnForm[Focus$DisplayOf|Grab$Current, _] := Widget;

(* Otherwise *)
TclReturnForm[__] := String;

ScrollOptions[Entry]=XScrollCommand;
ScrollOptions[SpinBox]=XScrollCommand;
ScrollOptions[ListBox]=XScrollCommand|YScrollCommand;
ScrollOptions[Canvas]=XScrollCommand|YScrollCommand;
ScrollOptions[TextEditor]=XScrollCommand|YScrollCommand;
ScrollOptions[_]=None;

Actions[Common]=Alternatives[Focus, Focus$DisplayOf, Focus$LastFor, Forget,
  Grab, Grab$Current, Grab$Global, Grab$Set, Grab$Set$Global,
  Grab$Status, Grab$Release, Lower, Pack, Raise,
  TkWait$Visibility, TkWait$Window];
Actions[Button]=Alternatives[Flash, Invoke];
Actions[CheckButton]=Alternatives[Deselect, Flash, Invoke, Select, Toggle];
Actions[RadioButton]=Alternatives[Deselect, Flash, Invoke, Select];
Actions[Entry]=Alternatives[BBox,
  Delete, Get, GetText, ICursor, Index, Insert, Scan$DragTo, Scan$Mark,
  Selection, Select$Adjust, Select$Clear, Select$From,
  Select$Present, Select$Range, Select$To,
  Validate, XView, XView$MoveTo, XView$Scroll];
Actions[SpinBox]=Alternatives[BBox,
  Delete, Get, GetText, ICursor, Identify, Index, Insert, Invoke,
  Scan$DragTo, Scan$Mark,
  Selection, Select$Adjust, Select$Clear, Select$Element, Select$From,
  Select$Present, Select$Range, Select$To,
  Validate, XView, XView$MoveTo, XView$Scroll];
Actions[ListBox]=Alternatives[Activate, BBox, Curselection,
  Delete, Get, GetText, Index,
  ItemCGet, ItemConfigure, Insert, Nearest, Scan$DragTo, Scan$Mark, See,
  Selection, Select$Anchor, Select$Clear, Select$Includes, Select$Set,
  Size, XView, XView$MoveTo, XView$Scroll, YView, YView$MoveTo, YView$Scroll];
Actions[Scale]=Alternatives[Coords, Get, Identify, Set];
Actions[ScrollBar]=Alternatives[Activate, Delta, Fraction, Get, Identify, Set];
Actions[Canvas]=Alternatives[AddTag, BBox, (* Bind, *)
  CanvasX, CanvasY, Coords,
  Create$Rectangle, Create$Text, Create$Line, Create$Polygon, Create$Image,
  Create$Oval, Create$Bitmap, Create$Arc, Create$Window,
  DChars, Delete, DTag, (* Find, *)
  Find$Above, Find$All, Find$Below, Find$Closest,
  Find$Enclosed, Find$Overlapping, Find$WithTag,
  Focus, GetTags, ICursor, Index, Insert, ItemCGet, ItemConfigure,
  Lower, Move, PostScript, Raise, Scale, Scan$DragTo, Scan$Mark,
  Select, Select$Adjust, Select$Clear, Select$From, Select$Item, Select$To,
  Type, XView, XView$MoveTo, XView$Scroll, YView, YView$MoveTo, YView$Scroll];
Actions[TextEditor]=Alternatives[BBox, Compare, Count, Debug,
  Delete, DLineInfo, Dump, Edit, Get, GetText,
  Image$CCget, Image$Configure, Image$Create, Image$Names, Index, Insert,
  Mark$Gravity, Mark$Names, Mark$Next, Mark$Previous, Mark$Set, Mark$Unset,
  Peer$Create, Peer$Names, Replace,
  Scan$DragTo, Scan$Mark, Search, See,
  Tag$Add, Tag$Bind, Tag$CGet, Tag$Configure, Tag$Delete, Tag$Lower,
  Tag$Names, Tag$NextRange, Tag$PrevRange, Tag$Raise, Tag$Ranges, Tag$Remove,
  Window$CGet, Window$Configure, Window$Create, Window$Names,
  XView, XView$MoveTo, XView$Scroll, YView, YView$MoveTo, YView$Scroll];
Actions[Menu]=Alternatives[Activate, (* Add, *)
  Clone, Delete, EntryCGet, EntryConfigure, Index, Invoke,
  Popup, Post, PostCascade, Type, Unpost, YPosition];

Actions[Window]=Alternatives[
  Aspect, Client, Deiconify, FocusModel, Frame, Geometry, Grid, Group,
  Iconify, IconBitmap, IconMask, IconName, IconPosition, IconWindow,
  MaxSize, MinSize, OverrideRedirect, PositionFrom, Protocol,
  Resizable, SizeFrom, State, Title, Tracing, Transient, Withdraw];
Actions[_]=None;
(Actions[#]=Flatten[Actions[#]|Actions[Common]])&/@Widgets;
AllActions:=Union[List@@Flatten[Alternatives@@(Actions/@Widgets)]]/.None:>Null[];
ActionName[x_]:=(ActionName[x]=StringReplace[ToLowerCase[x//" "],"$"->" "]);
ActionName[Focus$DisplayOf]="focus -displayof ";
ActionName[Focus$LastFor]="focus -lastfor ";
ActionName[Grab$Global]:="grab -global ";
ActionName[Grab$Set$Global]:="grab set -global ";
ActionName[GetText]=" get ";
Unprotect@@AllActions;
SetAttributes[Evaluate[AllActions],Constant];

Scan[(Variables[#]=TextVariable)&,
  {TextLabel,Button,MenuButton,Entry,SpinBox,TextMessage,OptionMenu}];
Variables[CheckButton]=TextVariable|Variable;
Variables[RadioButton]=TextVariable|Variable;
Variables[ListBox]=ListVariable;
Variables[Scale]=Variable;
Variables[MenuEntry]=Variable;
Variables[_]=None;

Scan[(Commands[#]=Command)&,
  {Button,CheckButton,RadioButton,Scale,ScrollBar,MenuEntry}];
Commands[Entry]=InvalidCommand|ValidateCommand;
Commands[SpinBox]=Command|InvalidCommand|ValidateCommand;
Commands[Menu]=PostCommand|TearOffCommand;
Commands[_]=None;

WidgetName[x_]:=(WidgetName[x]=ToLowerCase[ToString[x]]);
WidgetName[TextLabel]="label";		(* tkButton.c *)
WidgetName[TextMessage]="message";	(* tkMessage.c *)
WidgetName[TextEditor]="text";		(* tkText.c *)
WidgetName[OptionMenu]="tk_optionMenu";	(* optMenu.tcl *)
SetAttributes[{Commands,Variables},{HoldAll,Constant}];
SetAttributes[{Command,InvalidCommand,ValidateCommand,
  PostCommand,TearOffCommand,ListVariable,TextVariable,Variable},Constant];

TclCommand[Widget[w_,_],act_]:=TkPathName[w]//" "//ActionName[act];
TclCommand[Widget[w_,_Canvas],Raise]:=TkPathName[w]//" raise ";
TclCommand[Widget[w_,_Canvas],Lower]:=TkPathName[w]//" lower ";
TclCommand[Widget[w_,_Window],
  act:(Aspect|Client|Deiconify|FocusModel|Frame|Iconify|
    PositionFrom|Geometry|Grid|Group|IconBitmap|IconMask|IconName|
      IconPosition|IconWindow|MaxSize|MinSize|OverrideRedirect|
        Title|State|Withdraw|PositionFrom|Protocol|SizeFrom|Transient)]:=
          "wm "//ActionName[act]//TkPathName[w]//" ";
TclCommand[Widget[w_,_],
  act:(Raise|Lower|Focus|Focus$DisplayOf|Focus$LastFor|
    Grab|Grab$Global|Grab$Current|Grab$Release|
      Grab$Set|Grab$Set$Global|Grab$Status|
        TkWait$Visibility|TkWait$Window|Forget|Pack)]:=
        ActionName[act]//TkPathName[w]//" ";
TclCommand[Widget[w_,_],Forget]:="pack forget "//TkPathName[w]//" ";
TclCommand[Widget[w_,_Menu],Popup]:="tk_popup "//TkPathName[w]//" ";

Unprotect@@Widgets;

DefineWidget[w_]:=With[{optw$=Options[w],act$=Actions[w],
  cget$=CGetOptions[w],tcl$=Actions[w],com$=Commands[w]},
  (a$$_=w[Widget[master$_,_],opt$___])^:=(
    If[TkPathName[a$$]<=>"",
      DeleteWidget[a$$];
      Message[Tkinter::override,a$$]];
    a$$=.;
    With[{a$=a$$,np$=TkSymbol[a$$]},
      SetWidgetInfo[a$,master$,w];
      DefineWidgetSpecific[w,a$];
      If[tcl$<=>None,
        (a$[op$:tcl$]=x$_)^:=(WithPriority[
          {l$=String[TclCommand[a$,op$]]},
          (a$[op$]=y$_)^:=StandardForm[TclEval[TclArg[l$,y$]]]];
          a$[op$]=x$);
        (a$[op$:tcl$]:=x$_)^:=(WithPriority[
          {l$=String[TclCommand[a$,op$]]},
          (a$[op$]:=y$_)^:=StandardForm[TclEval[TclArg[l$,Unevaluated$[y$]]]]];
          a$[op$]:=x$);
        a$/:WidgetValue[a$,op$:tcl$]:=
          With[{l$=TclCommand[a$,op$],r$=TclReturnForm[op$,w]},
            a$/:WidgetValue[a$,op$]:=TclReturn[l$,r$];
            TclReturn[l$,r$]];
        a$/:WidgetValue[a$,(op$:tcl$)[v$_]]:=
          With[{l$=String[TclCommand[a$,op$]],r$=TclReturnForm[op$,w]},
            a$/:WidgetValue[a$,op$[u$_]]:=TclReturn[TclArg[l$,u$],r$];
            TclReturn[TclArg[l$,v$],r$]]];
      (a$[op$:optw$]=x$_)^:=(WithPriority[
        {l$=TkPathName[a$]//" configure"//TkOptionLabel[op$]},
        (a$[op$]=y$_)^:=StandardForm[TclEval[l$//TclArg1[y$]]]];
        a$[op$]=x$);
      a$/:WidgetValue[a$,CGet[v$:cget$]]:=
        With[{l$=TkPathName[a$]//" cget"//TkOptionLabel[v$],
          f$=TclReturnForm[v$,w]},
          a$/:WidgetValue[a$,CGet[v$]]:=TclReturn[l$,f$];
          a$/:WidgetValue[a$,v$]:=TclReturn[l$,f$];
          TclReturn[l$,f$]];
      a$/:WidgetValue[a$,v$:cget$]:=
        With[{l$=TkPathName[a$]//" cget"//TkOptionLabel[v$],
          f$=TclReturnForm[v$,w]},
          a$/:WidgetValue[a$,CGet[v$]]:=TclReturn[l$,f$];
          a$/:WidgetValue[a$,v$]:=TclReturn[l$,f$];
          TclReturn[l$,f$]];
      If[com$<=>None,
	a$/:WidgetValue[a$,CGet[v$:com$]]:=
	  With[{l$=TkPathName[a$]//" cget"//TkOptionLabel[v$],
	    f$=TclReturnForm[v$,w]},
	    a$/:WidgetValue[a$,CGet[v$]]:=TclReturn[l$,f$];
	    a$/:WidgetValue[a$,v$]:=TclReturn[l$,f$];
	    TclReturn[l$,f$]];
	a$/:WidgetValue[a$,v$:com$]:=
	  With[{l$=TkPathName[a$]//" cget"//TkOptionLabel[v$],
	    f$=TclReturnForm[v$,w]},
	    a$/:WidgetValue[a$,CGet[v$]]:=TclReturn[l$,f$];
	    a$/:WidgetValue[a$,v$]:=TclReturn[l$,f$];
	    TclReturn[l$,f$]];
	];
      a$/:WidgetValue[a$,CGet[v$__]]:=(WidgetValue[a$,#]&/@{v$});
      (a$[b$a_]=c$a_)^:=Configure[a$,b$a->c$a]; 
      (a$[b$a_]:=c$a_)^:=Configure[a$,b$a:>c$a]; 
      (a$=.)^:=DeleteWidget[a$];
      a$/:(b$_=a$):=(b$=Widget[a$,]);
      If[TkPathName[a$]===".",
        a$:=Widget[a$,w[master$]];
        Configure[a$,opt$],
        CreateWidget[Widget[a$,w[master$,opt$]]]];
      DefineWidgetSpecific[w,a$,Epilog]
      ]);
  (a$_=w[,opt$___])^:=(a$=w[Widget[Root$Window,Null],opt$]);
  (a$_=w[opt$___])^:=(a$=w[Widget[Root$Window,Null],opt$]);
  SetAttributes[w,Constant]];
Scan[DefineWidget,Reverse[Widgets]];

TclArgFontReplace[x$_] := Module[
  {{f$,op$,c$,y$}=SwitchCases[x$,{Font->_,_Rule|_RuleDelayed,_Real,_}]},
  If[f$==={},
      TclArg[Round[c$],y$,op$],
    op$=(Override[op$,AltFonts[f$=f$[[1,2]]]]);
    TclArg[Round[c$],y$,Font->f$,op$]]];
AltFonts[f_] := With[{AltScale = PkgConfig["Tkinter", "AltFonts:AltScale"],
  ScriptScale = PkgConfig["Tkinter", "AltFonts:ScriptScale"]},
  AltFonts[f] = Module[{{family, size, weight, slant, opt} = 
    {Family, PixelSize, Weight, Slant, Option}/.FontDecode[f]}, 
      List[
      ScriptFont->TextFont[family, weight, slant, Null@@opt,
	Ceiling[size * ScriptScale]],
      AltFont->TextFont["symbol", weight, slant, Null@@opt,
	Ceiling[size * AltScale]],
      AltScriptFont->TextFont["symbol", weight, slant, Null@@opt,
	Ceiling[size * AltScale * ScriptScale]]]]];

SpecialIndex[x_Real]:=(SpecialIndex[x]=x-1);
SpecialIndex[x_List]:=SpecialIndex/@x;
SpecialIndex[x_]:=x;

Widget[b_,_][c_]:=(WidgetValue[b,c]);
WidgetValue[b__]:=Configure[b];
SetAttributes[WidgetValue,HoldFirst];
(Widget[b_,_][c_]=d_)^:=(b[c]=d);
(Widget[b_,_][c_]:=d_)^:=(b[c]:=d);
Widget/:(a$_=Widget[b$_,_]):=(
  a$=.;
  WidgetCopyList[b$]=Union[WidgetCopyList[b$],Hold[a$]];
  a$:=b$;
!  (a$=.)^:=(b$=.);  ! To unset or not to unset?
  (a$[c$$_]=d$_)^:=(b$[c$$]=d$);
  (a$[c$$_]:=d$_)^:=(b$[c$$]:=d$));

SetAttributes[DefineWidgetSpecific,HoldAll];;

DefineWidgetSpecific[Entry,b_]:=(With[{l$=TkPathName[b]//" get"},
  b/:WidgetValue[b,Selection]:=
    If[b[Select$Present],
      {TclReturn[TkPathName[b]//" index sel.f",Real]+1,
        TclReturn[TkPathName[b]//" index sel.l",Real]},
      {0,0}];
  b/:WidgetValue[b,GetText[s_List]]:=TclReturn[l$]@@s;
  b/:WidgetValue[b,GetText[Selection]]:=
    TclReturn[l$]@@
      If[b[Select$Present],
        {TclReturn[TkPathName[b]//" index sel.f",Real]+1,
          TclReturn[TkPathName[b]//" index sel.l",Real]},
        {0,0}]];
  WithPriority[{l$=String[TclCommand[b,Delete]]},
    (b[Delete]=y$_)^:=StandardForm[TclEval[TclArg[l$,SpecialIndex[y$]]]]];
  WithPriority[{l$=String[TclCommand[b,Insert]]},
    (b[Insert]={y$_,s$_})^:=StandardForm[
      TclEval[TclArg[l$,SpecialIndex[y$],s$]]]]);

DefineWidgetSpecific[SpinBox,b_]:=(With[{l$=TkPathName[b]//" get"},
  b/:WidgetValue[b,Selection]:=
    If[b[Select$Present],
      {TclReturn[TkPathName[b]//" index sel.f",Real]+1,
        TclReturn[TkPathName[b]//" index sel.l",Real]},
      {0,0}];
  b/:WidgetValue[b,GetText[s_List]]:=TclReturn[l$]@@s;
  b/:WidgetValue[b,GetText[Selection]]:=
    TclReturn[l$]@@
      If[b[Select$Present],
        {TclReturn[TkPathName[b]//" index sel.f",Real]+1,
          TclReturn[TkPathName[b]//" index sel.l",Real]},
        {0,0}]];
  WithPriority[{l$=String[TclCommand[b,Delete]]},
    (b[Delete]=y$_)^:=StandardForm[TclEval[TclArg[l$,SpecialIndex[y$]]]]];
  WithPriority[{l$=String[TclCommand[b,Insert]]},
    (b[Insert]={y$_,s$_})^:=StandardForm[
      TclEval[TclArg[l$,SpecialIndex[y$],s$]]]]);

TextIndex[{l_Real,-1}]:=StandardForm[l//".end"];
TextIndex[{l_Real,End}]:=StandardForm[l//".end"];
TextIndex[{l_Real,c_Real}]:=StandardForm[l//"."//ToLowerCase[ToString[c]]];
TextIndex[{l_,Last}]:=StandardForm[l//".last"];
TextIndex[{l_,First}]:=StandardForm[l//".first"];
TextIndex[{l_,c_}]:=StandardForm[l//" "//c];
TextIndex[l_Real]:=StandardForm[l//".0"];
TextIndex[At[x_,y_]]:=StandardForm["@"//x//","//y];
TextIndex[x_+Chars[y_]]:=StandardForm[TextIndex[x]//" "//
  If[y>=0,"+",""]//y//" chars"];
TextIndex[x_+Lines[y_]]:=StandardForm[TextIndex[x]//" "//
  If[y>=0,"+",""]//y//" lines"];
TextIndex[x_]:=StandardForm[ToLowerCase[ToString[x]]];

DefineWidgetSpecific[TextEditor,a_]:=
  ((a[Raise]=b$_)^:=(a[Tag$Raise]=b$);
    (a[Lower]=b$_)^:=(a[Tag$Lower]=b$);
    With[{l$=TclCommand[a,Index]},
      a/:WidgetValue[a,Index[x$_]]:=TclReturn[l$//TextIndex[x$],TextIndex]];
    With[{l$=TclCommand[a,GetText]},
      a/:WidgetValue[a,GetText[x$_]]:=TclReturn[l$//TextIndex[x$],String];
      a/:WidgetValue[a,GetText[x$_,y$_]]:=
        TclReturn[l$//TclArg[{TextIndex[x$],TextIndex[y$]}],String]];
    WithPriority[{l$=String[TclCommand[a,Insert]]},
      (a[Insert]={y$_,m$__})^:=
        TclEval[TclArg[l$,TextIndex[y$],m$]]];
    WithPriority[{l$=String[TclCommand[a,Mark$Set]]},
      (a[Mark$Set]={y$_,m$_})^:=
        TclEval[TclArg[l$,y$,TextIndex[m$]]]];
    WithPriority[{l$=String[TclCommand[a,Delete]]},
        (a[Delete]={y$_,z$_})^:=
          TclEval[TclArg[l$,{TextIndex[y$],TextIndex[z$]}]];
        (a[Delete]={y$_})^:=
          TclEval[TclArg[l$,TextIndex[y$]]]];
    WithPriority[{l$=String[TclCommand[a,YView]]},
      (a[YView]=y$_)^:=
        TclEval[TclArg[l$,TextIndex[y$]]]];
    WithPriority[{l$=String[TclCommand[a,See]]},
      (a[See]=y$_)^:=
        TclEval[TclArg[l$,TextIndex[y$]]]];
    WithPriority[{l$=String[TclCommand[a,XView]]},
      (a[XView]=y$_)^:=
        TclEval[TclArg[l$,TextIndex[y$]]]]);

ListBoxSpecialActions=Delete|Select$Set|XView|YView|Activate|
  Select$Clear|Select$Anchor|Select$Includes;
With[{l=ListBoxSpecialActions},
  DefineWidgetSpecific[ListBox,a_]:=With[{g$=TkPathName[a]//" get "},
    (a[op$:l]=b$_)^:=(
      WithPriority[{l$=String[TclCommand[a,op$]]},
        (a[op$]=y$_)^:=StandardForm[TclEval[TclArg[l$,SpecialIndex[y$]]]]];
      a[op$]=b$);
    With[{l$=TkPathName[a]//" curselection"},
      a/:WidgetValue[a,Selection]:=
        Switch[#,{},{},{Null},{},_List,#+1,_,#]&[TclReturn[l$,List]]];
    a/:WidgetValue[a,GetText[x_Real]]:=StandardForm[TclReturn[g$//x-1]];
    a/:WidgetValue[a,GetText[x_List]]:=a[GetText[#]]&/@x;
    a/:WidgetValue[a,GetText[Selection]]:=a[GetText[#]]&/@a[Selection];
    a/:WidgetValue[a,GetText[x_]]^:=TclReturn[TclArg[String[g$],x]]]];

MenuSpecialActions=EntryConfigure|Invoke|Activate|Delete|Index|Type;
With[{m=MenuSpecialActions,m1=DeleteCases[MenuSpecialActions,Index,1],
  r=Text->Label},
  DefineWidgetSpecific[Menu,a_]:=(
    (a[op$:m]=b$_)^:=(
      WithPriority[{l$=String[TclCommand[a,op$]]},
        (a[op$]=y$_)^:=StandardForm[TclEval[TclArg[l$,SpecialIndex[y$]]]]];
      a[op$]=b$);
    With[{l$=String[TclCommand[a,EntryConfigure]]},
      (a[EntryConfigure]={n$_,Command:>f$_})^:=
        StandardForm[With[{cs=TkCommandString[None,Command:>f$]},
          TclEval[TclArg[l$,SpecialIndex[n$],String[" -"//cs]]]]];
      (a[EntryConfigure]={n$_,f$__})^:=StandardForm[
        TclEval[TclArg[l$,SpecialIndex[n$],{f$}/.r]]]];
    a/:WidgetValue[a,EntryCGet[n$_,v$_]]:=StandardForm[
      With[{l$=TkPathName[a]//" entrycget "//SpecialIndex[n$]//TkOptionLabel[v$],
        f$=TclReturnForm[v$,Menu]},
        a/:WidgetValue[a,EntryCGet[n$,v$]]:=TclReturn[l$,f$];
        TclReturn[l$,f$]]];
    a/:WidgetValue[a,EntryCGet[n$_,Text]]:=StandardForm[
      With[{l$=TkPathName[a]//" entrycget "//SpecialIndex[n$]//" -label"},
        a/:WidgetValue[a,EntryCGet[n$,v$]]:=TclReturn[l$,String];
        TclReturn[l$,String]]];
    a/:WidgetValue[a,EntryCGet[n$_,v$__]]:=(WidgetValue[a,EntryCGet[n$,#]]&/@{v$});
    With[{l$=String[TclCommand[a,Popup]]},
      (a[Popup]={x$_,y$_,b$_})^:=StandardForm[
        TclEval[TclArg[l$,{x$,y$,SpecialIndex[b$]}]]]];
    With[{l$=String[TclCommand[a,Index]]},
      a/:WidgetValue[a,Index[x$_]]:=StandardForm[
        TclReturn[TclArg[l$,SpecialIndex[x$]],Real]+1]];
    (a[Insert]={x$_,b$_})^:=TkInsertMenu[a,b$,x$];
    a/:WidgetValue[a,(s:m1)[x$_]]:=(
      With[{l$=String[TclCommand[a,s]]},
        a/:WidgetValue[a,s[y$_]]:=StandardForm[
          TclReturn[TclArg[l$,SpecialIndex[y$/.r]]]]];
      a[s[x$]]))];

DefineWidgetSpecific[Window,a_]:=
  WithPriority[{l$=String[TclCommand[a,Protocol]]},
    (a[Protocol]:={x$_,y$_})^:=StandardForm[TclEval[TclArg[l$,x$,
      String[" "//TkCommandString[Window,"":>y$]]]]]];

With[{l=TkCanvasGetTypes[]},
  Do[CanvasTypeID[l[[k]]]=k,{k,Length[l]}]];

With[{addtags=AddTag$Above|AddTag$Below|AddTag$Closest|
  AddTag$Enclosed|AddTag$Overlapping|AddTag$All|AddTag$WithTag},
  SetAttributes[List@@addtags,Constant];
  DefineWidgetSpecific[Canvas,a$_,Epilog]:=(
    If[Order[{8,2},Tk$Version]>=0,
      WithPriority[{l$=CanvasTypeID["rectangle"],
        p$=TkCanvasPointer[TkPathName[a$]]},
        (a$[Create$Rectangle]={x$__})^:=
          TkCanvasCreateItemDirect[p$,l$,x$]];
      WithPriority[{l$=CanvasTypeID["line"],
        p$=TkCanvasPointer[TkPathName[a$]]},
        (a$[Create$Line]={x$__})^:=
          TkCanvasCreateItemDirect[p$,l$,x$]];
      WithPriority[{l$=CanvasTypeID["oval"],
        p$=TkCanvasPointer[TkPathName[a$]]},
        (a$[Create$Oval]={x$__})^:=
          TkCanvasCreateItemDirect[p$,l$,x$]];
      WithPriority[{l$=CanvasTypeID["polygon"],
        p$=TkCanvasPointer[TkPathName[a$]]},
        (a$[Create$Polygon]={x$__})^:=
          TkCanvasCreateItemDirect[p$,l$,x$]];
      WithPriority[{p$=TkCanvasPointer[TkPathName[a$]]},
        a$/:WidgetValue[a$,Find$Enclosed[x$_]]:=
          TkCanvasFindEnclosed[p$,Flatten[x$]]]
      ];
    WithPriority[{l$=TkPathName[a$]//" create text "},
      (a$[Create$Text]=x$_)^:=StandardForm[
        TclEval[l$//TclArgFontReplace[x$]]]];
    WithPriority[{l$=String[TkPathName[a$]//" raise "]},
      (a$[Raise]=x$_)^:=StandardForm[TclEval[TclArg[l$,x$]]]];
    a$/:WidgetValue[a$,ItemCGet[v$_,opt$_]]:=
      With[{l$=TkPathName[a$]//" itemcget "//TclArg[v$]//" "//TkOptionLabel[opt$],
        f$=TclReturnForm[opt$,Canvas]},
        a$/:WidgetValue[a$,ItemCGet[v$,opt$]]:=TclReturn[l$,f$];
        TclReturn[l$,f$]];
    With[{l$=String[TkPathName[a$]//" addtag "]},
      (a$[act$:addtags]=v$_)^:=(
        With[{s$=ToLowerCase[act$//" "],v1$=Flatten[{v$},1]},
          With[{p$=String[s$[StringPosition[s$,"$"][[1,1]]+1,-1]//" "]},
            (a$[act$]=w$_)^:=StandardForm[TclEval[TclArg[l$,w$,p$]]];
            (a$[act$]={t$_,w$__})^:=StandardForm[TclEval[TclArg[l$,t$,p$,w$]]]]];
        a$[act$]=v$)])];
Canvas$ItemOptions=Stipple|Fill;
Unprotect@@Canvas$ItemOptions;
SetAttributes[Evaluate[List@@Canvas$ItemOptions],Constant];

SetAttributes[{Widget,DefineWidget},Constant];;

TkEvalActions[wid$:Widget[a$_,_],{op$_->x$_}]:=StandardForm[WithPriority[
  {l$=String[TclCommand[wid$,op$]]},
  (a$[op$]=y$_)^:=TclEval[TclArg[l$,y$]]];
  a$[op$]=x$];
TkEvalActions[wid$:Widget[a$_,_],{op$_:>x$_}]:=StandardForm[WithPriority[
  {l$=String[TclCommand[wid$,op$]]},
  (a$[op$]:=y$_)^:=TclEval[TclArg[l$,Unevaluated$[y$]]]];
  a$[op$]:=x$];
TkEvalActions[w_,{op_->v_}]:=TkEvalActions[Widget[w,],{op->v}];
TkEvalActions[w_,{op_:>v_}]:=TkEvalActions[Widget[w,],{op:>v}];
TkEvalActions[w_,{op:(_Rule|_RuleDelayed)..}]:=Scan[TkEvalActions[w,{#}]&,{op}];
TkEvalActions[__]=Null;

VarName[ListVariable]="lv_";
VarName[TextVariable]="tv_";
VarName[Variable]="v_";
VarType[ListVariable]=StringList;
VarType[TextVariable]=String;
VarType[Variable]=Real;
TkEvalVariables[w_,{vl_}]:=
  TclEval[TkPathName[w]//" configure "//DefineTkVariable[w,vl]];
TkEvalVariables[w_,{vl__}]:=
  Scan[TkEvalVariables[w,{#}]&,{vl}];
TkEvalVariables[__]=Null;
SetAttributes[TkEvalVariables,HoldFirst];
TkVariable[_]="";
TkVariable[Hold[v_]]:=TkVariable[v];
TkVariableRefs[_]=0;
TkVariableRefs[Hold[v_]]:=TkVariableRefs[v];
(TkVariableRefs[Hold[v_]]=val_)^:=(TkVariableRefs[v]=val);
(TkVariableRefs[var_]+=val_)^:=(TkVariableRefs[var]=TkVariableRefs[var]+val);
(TkVariableRefs[var_]-=val_)^:=(TkVariableRefs[var]=TkVariableRefs[var]-val);
(TkVariableRefs[var_]++)^:=With[{old=TkVariableRefs[var]},
  TkVariableRefs[var]=old+1;old];
(TkVariableRefs[var_]--)^:=With[{old=TkVariableRefs[var]},
  TkVariableRefs[var]=old-1;old];
(++TkVariableRefs[var_])^:=(TkVariableRefs[var]=TkVariableRefs[var]+1);
(--TkVariableRefs[var_])^:=(TkVariableRefs[var]=TkVariableRefs[var]-1);

DefineTkVariable[w_,(Rule|RuleDelayed)[label_,var_]]:=Module[
  {vn$=TkVariable[var],xx}, StandardForm[
    If[vn$=="", (* Create new TkVariable Symbol if does not exist *)
      vn$=TkSymbol[w]//VarName[label]//BaseForm[++Tk$DefCount,36]];
    If[TkVariableRefs[var]===0, (* Initialize TkVariable if does not linked *)
      xx=If[VarType[label]===String,ToString[var],var];
      If[StringQ[xx] || RealQ[xx] || xx === NaN,
        TclEval["set "//vn$//" {"//xx//"}"]];
      SetTkVariable[vn$,var,w,label]]];
  (* Register to WidgetVariable list and count-up reference *)
  AppendTo[WidgetVariable[w],{label,Hold[var]}];
  TkVariableRefs[var]++;
  ToLowerCase[" -"//label]//" "//vn$];
SetAttributes[DefineTkVariable,HoldFirst];

SetTkVariable[vn$_,var_,w_,label_]:=With[
  {c$="set "//vn$,vt$=VarType[label]},
  (var=x_)^:=StandardForm[TclEval[c$//" {"//x//"}"];x];
  (var=.)^:=DeleteVariable[var];
  var:=TclReturn[c$,vt$];
  TkVariable[var]=vn$];

SetTkVariable[vn$_,v:(var_[arg___]),w_,label_]:=With[
  {c$="set "//vn$,vt$=VarType[label]},
  (v=x_)^:=StandardForm[TclEval[c$//" {"//x//"}"];x];
  (v=.)^:=DeleteVariable[v];
  (var[___?({##}==={arg}&)]=x_)^:=(v=x);
  (var[___?({##}==={arg}&)]=.)^:=DeleteVariable[v];
  v:=TclReturn[c$,vt$];
  TkVariable[v]=vn$];
SetAttributes[SetTkVariable,HoldRest];

DeleteTkVariable[var_]:=With[{exist=(TkVariable[var]<>""), val=var},
!!Print["DelTkVar: ", TkVariable[var], " ", TkVariableRefs[var], " ", Hold[{exist, var, val}]];
  If[exist && --TkVariableRefs[var]===0,
    TkVariableRefs[var]=.;
    var/:(var=x_)=.;
    var/:(var=.)=.;
    var=val]];
DeleteTkVariable[v:var_[arg___]]:=With[{exist=(TkVariable[v]<>""), val=v},
!!Print["DelTkVar: ", TkVariable[v], " ", TkVariableRefs[v]," ", Hold[{exist, v, {var}, {arg}, val}]];
  If[exist && --TkVariableRefs[v]===0,
    TkVariableRefs[v]=.;
    If[var<=>Part,
      var/:(v=x_)=.;
      var/:(v=.)=.;
      var/:(var[___?(({##}==={arg})&)]=x_)=.;
      var/:(var[___?(({##}==={arg})&)]=.)=.];
    v=val]];
DeleteTkVariable[v__]:=Scan[DeleteTkVariable,Hold[v]];

WidgetVariable[_]={};
DeleteVariable[var_]:=(
  If[TkVariable[var]<>"",
    TkVariableRefs[var]=.;
    TkVariable[var]=.];
  var/:(var=x_)=.;
  var/:(var=.)=.;
  var=.);
DeleteVariable[v:var_[arg___]]:=(
  If[TkVariable[v]<>"",
    TkVariableRefs[v]=.;
    TkVariable[v]=.];
  var/:(v=x_)=.;
  var/:(v=.)=.;
  var/:(var[___?(({##}==={arg})&)]=.)=.;
  var/:(var[___?(({##}==={arg})&)]=x_)=.;
  If[Head[var]<=>List, v=., v=Null]);
DeleteVariable[v__]:=Scan[DeleteVariable,Hold[v]];

SetAttributes[{DeleteTkVariable,DeleteVariable},HoldAll];
SetAttributes[{WidgetVariable,TkVariable,TkVariableRefs},HoldAll];

TkAddMenu[w_,{add__}]:=With[{c=TkPathName[w]//" add "},
  Scan[TkAddMenu1[w,c,#]&,
    Flatten[(#/.Text->Label)&/@{add}[[,2]]]]];
TkAddMenu[__]=Null;
TkInsertMenu[w_,add_,ind_]:=TkInsertMenu[w,{add},ind];
TkInsertMenu[w_,{add__},ind_]:=StandardForm[
  With[
    {c=TkPathName[w]//" insert "//SpecialIndex[ind]},
    Scan[TkAddMenu1[w,c,#]&,
      Flatten[(#/.Text->Label)&/@{add}]]]];
SetAttributes[{TkAddMenu,TkInsertMenu},HoldFirst];
MenuEntries=Button|CheckButton|RadioButton|Separator|Cascade;
Scan[(MenuAddWidget[#]=ToLowerCase[ToString[#]])&,MenuEntries];
MenuAddWidget[Button]="command";
MenuAddWidget[x_]:=StandardForm[ToLowerCase[ToString[x]]];

TkEvalCommand[Widget[w_,wid_[___]],{op__}]:=
  Scan[
    TclEval[TkPathName[w]//" configure -"//
      TkCommandString[wid,#]]&,{op}];
TkEvalCommand[__]=Null;
With[{r=Rule|RuleDelayed},
  TkCommandString[Scale,r[label_,com_]]:=StandardForm[
    ToLowerCase[ToString[label]]//
      " {sadeval {WidgetCommand["//
	WidgetCommandID[Block[{$Arg=#},com]]//"]&}}"];
  TkCommandString[ScrollBar,r[label_,com_]]:=StandardForm[
    ToLowerCase[ToString[label]]//
      " {sadeval {WidgetCommand["//
        WidgetCommandID[Block[{$Arg=ScrollBarArgForm[##]},com]]//"]&}}"];
  TkCommandString[SpinBox,r[label_,com_]]:=StandardForm[
    ToLowerCase[ToString[label]]//
      " {"//TclBindString[{Direction,String,Widget}]//"WidgetCommand["//
        WidgetCommandID[com]//"]]}}"];
  TkCommandString[_,r[label_,com_]]:=StandardForm[
    ToLowerCase[ToString[label]]//
      " {sadcommand "//
        WidgetCommandID[com]//"}"]];

TkCommandName[s_[b_]]:=StandardForm[
  "{"//TkPathName[s]//ToLowerCase[" "//b]//"}"];
SetAttributes[TkCommandName,HoldAll];
TkEvalScroll[w_,{sopts__}]:=With[{n$=TkPathName[w]//" configure "},
  StandardForm[Scan[
    (TclEval[n$//TkOptionLabel[First[#]]//
      Extract[#,{2},TkCommandName]];
      With[{i=Extract[#,{2},Head]},
        If[Head[Second[i]]===ScrollBar,
          TclEval[TkPathName[i]//" configure -command {"//
            TkPathName[w]//" "//
            ToLowerCase[ToString[First[#]][1]]//"view}"]]])&,{sopts}]]];
TkEvalScroll[__]:=Null;
SetAttributes[TkEvalScroll,HoldFirst];
ScrollBarArgForm[x___]:=StandardForm[If[RealQ[#],#,ToString[#]]&/@{x}];

With[{r=Rule|RuleDelayed,MenuEntries,Options[MenuEntry]},
  TkAddMenu1[wid_,c_,(w:MenuEntries)[op___]]:=Module[
    {ndef=name//"_"//BaseForm[++Tk$DefCount,36],
      {opt,var,com,menu}=SwitchCases[Override[op],
        {r[Options[MenuEntry],_],r[Variables[MenuEntry],_],
          r[Commands[MenuEntry],_],r[Menu,_]}],
      optstr},
    optstr=TclArg[opt];
    If[com<=>{},
      optstr=optstr//" -"//TkCommandString[None,First[com]]];
    If[var<=>{},
      Scan[(
        optstr=optstr//" "//DefineTkVariable[wid,#])&,var]];
    If[menu<=>{}, StandardForm[
      optstr=optstr//" -menu "//MapAt[TclArg,menu,{1,2}][[1,2]]]];
    TclEval[c//" "//MenuAddWidget[w]//" "//optstr]];
  SetAttributes[TkAddMenu1,HoldFirst];
  ];

TkWidget[_]=Null;
Root$WindowWidget=None;
SetAttributes[{TkPathName,ChildWidget,WidgetCopyList},HoldAll];
ChildWidget[Root$Window]=Hold[];
ChildWidget[x_]:=If[MatchQ[x,_Widget],
  Function[a,ChildWidget[a]][Extract[x,{1},Unevaluated$]],
  Hold[]];
SetWidgetInfo[w_,Widget[master_,_]|master_,wid_]:=
  If[TkPathName[master]==="",
    Message[Tkinter::undefmaster,master];
    Return[],
    AppendTo[ChildWidget[master],Unevaluated$[w]];
    ChildWidget[w]=Hold[];
    TkWidget[TkPathName[w,master,wid]]=w];
WidgetCopyList[_]=Hold[];

DeleteWidget[Widget[w_,_[master_,___]],d_:True]:=
  If[TkPathName[w]<=>"",
    If[d,TclEval["destroy "//TkPathName[w]]];
    Scan[
      If[MatchQ[#,Widget[w,_]],
        TkPathName[#]=.;
        TkSymbol[#]=.;
        Clear[#]]&,WidgetCopyList[w]];
    WidgetCopyList[w]=.;
    ChildWidget[master]=
      DeleteCases[ChildWidget[master],Unevaluated$[w],1];
    Scan[DeleteWidget[#,False]&,ChildWidget[w]];
    ChildWidget[w]=.;
    TkWidget[TkPathName[w]]=.;
    TkPathName[w]=.;
    TkSymbol[w]=.;
    GeometryManager[w]=.;
    Extract[WidgetVariable[w],{,2,1},DeleteTkVariable];
    WidgetVariable[w]=.;
    Clear[w],
    Message[Tkinter::nonexist,w]];
DeleteWidget[w1_,w2__]:=Scan[DeleteWidget,{w1,w2}];
DeleteAllWidgets[]:=DeleteWidget@@Rest[ChildWidget[Root$Window]];

TkPathName[_]="";
TkPathName[Root$Window]=".";
TkPathName[w_,m_,wid_]:=(
  TkPathName[w]=
    If[Root$WindowWidget===None && wid===Window,
      Root$WindowWidget=w;".",
      If[TkPathName[m]===".","",TkPathName[m]]//"."//
        BaseForm[++Tk$DefCount,36]]);
TkPathName[Widget[w_,_]]:=TkPathName[w];
TkPathName[x_]:=If[Head[x]===Widget,
  TkPathName[x]=Function[a,TkPathName[a]][Extract[x,{1},Unevaluated$]],
  ""];
SetAttributes[SetWidgetInfo,HoldFirst];
SetAttributes[Add,Constant];

With[{r=Rule|RuleDelayed},
  With[{r1={r[Options[Window],_],
    r[Actions[Window],_]|Actions[Window]|Actions[Window][_]}},
    CreateWidget[Widget[w_,Window[m_,opt___]]]:=
      Module[{{opts,act}=SwitchCases[Override[opt],r1]},
        StandardForm[
          TclEval["toplevel "//TkPathName[w]//" "//TclArg[opts]];
          TkEvalActions[Widget[w,Window[m]],act]];
        w:=Widget[w,Window[m]]]];

  With[{r1={r[Options[Menu],_],r[Add,_],r[Commands[Menu],_],
    r[Actions[Menu],_]|Actions[Menu]|Actions[Menu][__]}},
    CreateWidget[Widget[w_,Menu[master_,opt___]]]:=Module[
      {{opts,add,com,act}=SwitchCases[
        Override[opt,TearOff->False],r1]},
      StandardForm[
        TclEval["menu "//TkPathName[w]//" "//TclArg[opts]];
        TkEvalCommand[Widget[w,Menu[master]],com];
        TkAddMenu[w,add];
        TkEvalActions[Widget[w,Menu[master]],act]];
      Switch[master,
        _[_,_MenuButton],
        TclEval[TkPathName[master]//" configure -menu "//TkPathName[w]],
        _[_,_OptionMenu],
        TclEval[TkPathName[master]//" configure -menu "//TkPathName[w]//
          "\n"//TkPathName[w]//" configure -tearoff 0"]];
      w:=Widget[w,Menu[master]]]];

  With[{r1={r[Options[OptionMenu],_],r[Items,_],
    r[Variables[OptionMenu],_],r[Commands[OptionMenu],_],
    r[Options[Pack],_],
    r[Actions[OptionMenu],_]|Actions[OptionMenu]|
      Actions[OptionMenu][__]}},
    CreateWidget[Widget[w_,OptionMenu[master_,opt___]]]:=Module[
      {name=TkSymbol[w],
        {opts,items,var,com,pack,act}=
          SwitchCases[Override[opt],r1]},
      StandardForm[
        TclEval[WidgetName[OptionMenu]//" "//TkPathName[w]//
          If[var<=>{},
            DefineTkVariable[w,First[var]];
            With[{vv=Extract[var,{1,2},Hold]},
              " "//TkVariable[vv]//" "//
                If[items<=>{},TclArg[items[[1,2]]],"{}"]],
            ""]];
        If[opts<=>{},TclEval[TkPathName[w]//" configure "//TclArg[opts]]];
        TkEvalCommand[Widget[w,OptionMenu[master]],com];
        PackWidget[w,pack,True];
        TkEvalActions[Widget[w,OptionMenu[master]],act]];
      w:=Widget[w,OptionMenu[master]]]];

  CreateWidget[Widget[w_,wid_[master_,opt___]]]:=Module[
    {{opts,var,com,pack,tcl,sopts}=SwitchCases[TkOptionReplace[opt],
      {r[Options[wid],_],r[Variables[wid],_],r[Commands[wid],_],
        r[Options[Pack],_],
        r[Actions[wid],_]|Actions[wid]|Actions[wid][__],
        r[ScrollOptions[wid],_]}]},
    StandardForm[
      TclEval[WidgetName[wid]//" "//TkPathName[w]//" "//TclArg[opts]];
      TkEvalVariables[w,var];
      TkEvalCommand[Widget[w,wid[master]],com];
      PackWidget[w,pack,True];
      TkEvalActions[Widget[w,wid[master]],tcl];
      TkEvalScroll[w,sopts]];
    w:=Widget[w,wid[master]]];

  Scan[(WidgetAttributes[#]=
    {r[Actions[#],_]|Actions[#]|Actions[#][__],
      r[Options[#],_],r[Commands[#],_],r[Options[Pack],_],
      r[ScrollOptions[#],_]})&,Widgets];

  Unprotect[Configure];
  Configure[wid:Widget[w_,_Menu],opt__]:=Module[
    {{opts,com,act,add}=SwitchCases[Override[opt],
      {r[Options[Menu],_],r[Commands[Menu],_],
        r[Actions[Menu],_]|Actions[Menu]|Actions[Menu][__],
        r[Add,_]}]},
    StandardForm[
      If[opts<=>{},
        TclEval[TkPathName[w]//" configure "//TclArg[opts]]];
      TkEvalCommand[wid,com];
      If[add<=>{},TkAddMenu[w,add]];
      TkEvalActions[w,act]]];

  Configure[wid1:Widget[w_,wid_[__]],opt__]:=(Module[
    {name=TkSymbol[w],
      {tcl,opts,com,pack,sopts}=SwitchCases[
        Override[opt],
	WidgetAttributes[wid]]},
    StandardForm[
      If[opts<=>{},
        TclEval[TkPathName[w]//" configure "//TclArg[opts]]];
      TkEvalCommand[wid1,com];
      If[pack<=>{},PackWidget[w,pack]];
      TkEvalScroll[w,sopts];
      TkEvalActions[w,tcl]]]);

  Configure[Widget[w_,wid_[__]]]:=(
    Join[Thread[List@@CGetOptions[wid]->(w[CGet[##]]&@@CGetOptions[wid])],
      If[GeometryManager[w]<=>"",
        GetPackInfo[w],{}],
      If[Commands[wid]<=>None, Module[{c, c$, p$, l$, rep$},
	l$ = ?WidgetCommand/.{WidgetCommand->Command,SetDelayed->RuleDelayed};
	rep$ = Switch[wid,
	  Scale|ScrollBar, {
	    (Command:>Block[{___},arg$_]):>(Command:>arg$)},
	  _, {}];

	With[{Command$ = #},
	  Which[c = w[CGet[Command$]];
	    c === "", Command$:>,

	    c[1,11] === "sadcommand ", (
	      c$ = ToExpression[c[12,-1]];
	      p$ = Position[l$, Command[c$]];
	      If[p$ === {}, With[{c$}, Command$:>WidgetCommand[c$]],
		l$[[1,p$[[1,2]]]]/.Command[_]->Command$]),

	    And[c[1,9] === "sadeval {", c[-1] === "}",
	      (p$ = StringPosition[c, "WidgetCommand["]) <=> {}], (
		c$ = c[p$[[1,2]] + 1, -1];
		If[(p$ = StringPosition[c$, "]"]) === {}, Null[],
		  c$ = ToExpression[c$[1, p$[[1,1]] - 1]];
		  p$ = Position[l$, Command[c$]];
		  If[p$ === {}, With[{c$}, Command$:>WidgetCommand[c$]],
		    l$[[1,p$[[1,2]]]]/.{Command[_]->Command}/.rep$
		     /.(Command:>arg$_):>(Command$:>arg$)]]),

	    True, (
	      Null[])]]&/@Flatten[{Commands[wid]}/.Alternatives->List]], {}],
      If[WidgetVariable[w]<=>{},
        Apply[RuleDelayed,Union[WidgetVariable[w]],{1}]/.Hold[x_]:>x,{}]]);

  Configure[x___]:=Message[Tkinter::undef,Configure[x]];
  ];
ConfigureWidget=Configure;

With[{p=List@@Options[Pack]},
  With[{pl=Thread[{TkOptionLabel[#][2,-1]&/@p,p}]},
    GetPackInfo[w_]:=Module[
      {s=TclReturn[GeometryManager[w]//"info "//TkPathName[w]]//" ",
        l,l1},
      (l=StringPosition[s,#1];
        If[l<=>{},
          l1=StringPosition[s[l[[1,2]]+1,-1]," "];
          #2->ToReturnForm[s[l[[1,2]]+1,l1[[1,1]]+l[[1,2]]-1],
            TclReturnForm[#2,]],
          Null[],])&@@[pl,{1}]]]];
SetAttributes[GetPackInfo,HoldAll];

CreateWidget[w_List]:=Scan[CreateWidget,Flatten[w,1,List]];
CreateWidget[v_,w__]:=Scan[CreateWidget,Flatten[{v,w},1,List]];

PackWidget[w_,{},True]:=(GeometryManager[w] = "pack ";
  TclEval[GeometryManager[w]//TkPathName[w]]);
PackWidget[_,{},___]=Null;
PackWidget[w_,op_]:=StandardForm[TclEval[GeometryManager[w]//TkPathName[w]//
  " "//TclArg[op]]];
PackWidget[w_,op_,True]:=StandardForm[With[
  {gm=ToLowerCase[ToString[GM/.op/.GM->Pack]]},
  GeometryManager[w] = gm//" ";
  TclEval[gm//" "//TkPathName[w]//" "//TclArg[DeleteCases[op,GM->_,1]]]]];
GeometryManager[_] := "";
SetAttributes[{PackWidget,GeometryManager},HoldFirst];

WInfoKeys=Atom|AtomName|Cells|Children|Class|Containing|Depth|Exists|
  FPixels|Geometry|Height|ID|Interps|IsMapped|Name|Parent|PathName|
    Pixels|ReqHeight|ReqWidth|RGB|RootX|RootY|Screen|ScreenCells|
      ScreenDepth|ScreenHeight|ScreenWidth|ScreenMMHeight|ScreenMMWidth|
        ScreenVisual|TopLevel|Visual|VRootHeight|VRootWidth|VrootX|VrootY|
          Width|X|Y|PointerX|PointerY|PointerXY;
WInfoReturnForm[Atom|Cells|Depth|Exists|Height|ID|IsMapped|Pixels|
  ReqHeight|ReqWidth|RootX|RootY|ScreenCells|ScreenDepth|ScreenHeight|
    ScreenWidth|ScreenMMHeight|ScreenMMWidth|VRootHeight|VRootWidth|
      VrootX|VrootY|Width|X|Y|PointerX|PointerY]=Real;
WInfoReturnForm[PointerXY]=List;
WInfoReturnForm[Parent]=Widget;
WInfoReturnForm[Children]=WidgetList;
WInfoReturnForm[_]=String;
Unprotect[List@@WInfoKeys];
SetAttributes[List@@WInfoKeys,Constant];

With[{TkSymbol,WInfoKeys},
  TclWidget[Widget[w_,_],com_,opt__]:=StandardForm[
    TclEval[TkPathName[w]//com//TclArg[opt]]];

  WidgetInformation[w_,key_List,x___]:=
    WidgetInformation[w,#,x]&/@key;

  WidgetInformation[Widget[w_,_],key:WInfoKeys,id_]:=StandardForm[
    TclReturn["winfo "//ToLowerCase[key//" "]//
      TkPathName[w]//" "//TclArg[id],WInfoReturnForm[key]]];

  WidgetInformation[Widget[w_,_],key:WInfoKeys]:=StandardForm[
    TclReturn["winfo "//ToLowerCase[key//" "]//
      TkPathName[w],WInfoReturnForm[key]]]];


WidgetGeometry[x_]:=FromGeometry[WidgetInformation[x,Geometry]];
InformationWidget=InfoWidget=WidgetInfo=WidgetInformation;
ApplicationNames[]:=WidgetInformation[Root$Window,Interps];
ApplicationName[]:=WidgetInformation[Root$Window,Name];
ApplicationName[n_]:=StandardForm[
  TclEval["tk appname "//ToInputString[n]];
    SetAppNameProp[];ApplicationName[]];

SetAttributes[{Once,Event,Tag,XRoot,YRoot,Char,KeySym,KeyCode,KeySymNum,
  Display,SendEvent,SerialNumber,Time},Constant];

EventType["2"]="<Key>";
EventType["3"]="<KeyRelease>";
EventType["4"]="<Button>";
EventType["5"]="<ButtonRelease>";
EventType["6"]="<Motion>";
EventType["7"]="<Enter>";
EventType["8"]="<Leave>";
EventType["9"]="<FocusIn>";
EventType["10"]="<FocusOut>";
EventType["11"]="<Keymap>";
EventType["12"]="<Expose>";
EventType["15"]="<Visibility>";
EventType["17"]="<Destroy>";
EventType["18"]="<Unmap>";
EventType["19"]="<Map>";
EventType["21"]="<Reparent>";
EventType["22"]="<Configure>";
EventType["24"]="<Gravity>";
EventType["26"]="<Circulate>";
EventType["28"]="<Property>";
EventType["32"]="<Colormap>";

EventKey[Type]="EventType[\"%T\"],";
EventKey[Widget]="TkWidget[\"%W\"],";
EventKey[XRoot]="%X,";
EventKey[YRoot]="%Y,";
EventKey[X]="%x,";
EventKey[Y]="%y,";
EventKey[Char]="\"%A\",";
EventKey[KeySym]="\"%K\",";
EventKey[KeySymNum]="%N,";
EventKey[Height]="%h,";
EventKey[Width]="%w,";
EventKey[KeyCode]="%k,";
EventKey[Button]="%b,";
EventKey[SerialNumber]="%#,";
EventKey[Above]="%a,";
EventKey[Count]="%c,";
EventKey[Detail]=EventKey[Direction]="\"%d\",";
EventKey[Focus]="%f,";
EventKey[Mode]="%m,";
EventKey[OverrideRedirect]="%o,";
EventKey[Place]="\"%p\",";
EventKey[State]="%s,";
EventKey[Time]="%t,";
EventKey[ValueMask]="%v,";
EventKey[BorderWidth]="%B,";
EventKey[Display]="\"%D\",";
EventKey[SendEvent]="%E,";
EventKey[RootWindowID]="%R,";
EventKey[SubWindowID]="%S,";
EventKey[Tag]="\"??\",";
EventKey[String]="\"%s\",";


TclEvents={Type,Widget,XRoot,YRoot,X,Y,Char,KeySym,KeySymNum,
  Height,Width,KeyCode,Button,SerialNumber,Above,Count,
  Detail,Focus,Mode,OverrideRedirect,Place,State,Time,
  CalueMask,BorderWidth,Display,SendEvent,RootWindowID,
  SubWindowID,Tag};
DefaultTclEvents={X,Y,XRoot,YRoot,KeySym,Widget,Tag};

WidgetCommandCount=0;
WidgetCommand[_]=Null;
WidgetCommandID[f_]:=(WidgetCommandID[f]=
    (WidgetCommand[++WidgetCommandCount]:=f;
      WidgetCommandCount));
WidgetCommandID[f_,Once]:=
  With[{n=++WidgetCommandCount},
    WidgetCommand[n]:=First[{f,WidgetCommand[n]=.}];
    n];
SetAttributes[WidgetCommandID,HoldFirst];

TclBindString[l_]:="sadeval {Block[{$Event:={"//
  (StringJoin@@(#//"->"//EventKey[#]&/@l))[1,-2]//"}},";
TclBindString[l_,NoTag]:=TclBindString[DeleteCases[l,Tag,1]][1,-4]//",Tag->";
TclBindString[All]=TclBindString[TclEvents];
TclBindString[Default]=TclBindString[DefaultTclEvents];
TclBindString[All,NoTag]=TclBindString[TclEvents,NoTag];
TclBindString[Default,NoTag]=TclBindString[DefaultTclEvents,NoTag];

TagBind[Widget[_,_Canvas]]=" bind {";
TagBind[Widget[_,_TextEditor]]=" tag bind {";

Bind[w_,e_]:=Bind[w,e,Null];
With[{def={Add->False,Event->Default,Bind->Null,Tags->Null,Break->False,
  Raise->True}},
  Bind[Widget[w_,_],event_,fun_,opt___]:=StandardForm[Module[
    {fs="WidgetCommand["//WidgetCommandID[fun]//"]",
      pw=TkPathName[w],br,
      add=If[Add/.{opt}/.def," {+"," {"," {"],
      {tag,break,ev,raise}={Tags,Break,Event,Raise}/.{opt}/.def},
    br=fs//If[break,"]}; break} ","]}} ","]}} "];
    If[tag===Null,
      TclEval["bind "//pw//" "//event//add//
        TclBindString[ev]//br],
      If[Head[tag]===List,
        pw=pw//TagBind[w];
        add="} "//event//add//TclBindString[ev,NoTag];
        br="}},"//br;
        If[raise,
          Scan[(TclEval[pw//#//add//ToInputString[#]//br];
            w[Raise]=#)&,tag],
          Scan[TclEval[pw//#//add//ToInputString[#]//br]&,tag]],
        TclEval[pw//TagBind[w]//tag//"} "//event//add//
          TclBindString[ev,NoTag]//ToInputString[tag]//"}},"//br];
        If[raise,
          w[Raise]=tag]]]]];
  Bind[Widget[w_,_],event_,,opt___]:=StandardForm[Module[
    {tag=Tags/.{opt}/.def},
    If[tag===Null,
      TclEval["bind "//TkPathName[w]//" "//event//" {}"],
      If[Head[tag]===List,
        Scan[TclEval[TkPathName[w]//TagBind[w]//#//"} "//event//" {}"]&,tag],
        TclEval[TkPathName[w]//TagBind[w]//tag//"} "//event//" {}"]
        ]];
    ]]];

BindWidget=Bind;
BindTags[Widget[w_,_]]:=TclReturn["bindtags "//TkPathName[w],StringList];
BindTags[Widget[w_,_],t_]:=StandardForm[TclEval["bindtags "//TkPathName[w]//" {"//TclArg[t]//"}"]];
SetAttributes[{Bind,BindWidget},{HoldRest,Constant}];
SetAttributes[BindTags,Constant];

Unprotect[After];
After[t_,fun_]:=
  TclReturn[StandardForm["after "//1+Floor[t*1000]//
    " {sadcommand "//WidgetCommandID[fun,Once]//"}"]];
After[t_]:=Pause[t];
AfterIdle[fun_]:=
  TclReturn[StandardForm["after idle "//
    " {sadcommand "//WidgetCommandID[fun,Once]//"}"]];
AfterCancel[id_]:=TclEval["after cancel "//id];
SetAttributes[After,HoldRest];
SetAttributes[AfterIdle,HoldAll];

(* Checked by Amorita 2004/04/01 *)
EventType["2"]="<Key>";
EventType["3"]="<KeyRelease>";
EventType["4"]="<Button>";
EventType["5"]="<ButtonRelease>";
EventType["6"]="<Motion>";
EventType["7"]="<Enter>";
EventType["8"]="<Leave>";
EventType["9"]="<FocusIn>";
EventType["10"]="<FocusOut>";
EventType["11"]="<Keymap>";
EventType["12"]="<Expose>";
EventType["15"]="<Visibility>";
EventType["17"]="<Destroy>";
EventType["18"]="<Unmap>";
EventType["19"]="<Map>";
EventType["21"]="<Reparent>";
EventType["22"]="<Configure>";
EventType["24"]="<Gravity>";
EventType["26"]="<Circulate>";
EventType["28"]="<Property>";
EventType["32"]="<Colormap>";

(* XListFonts wrapper *)

With[{XFontPath = XGetFontPath[]},
  If[Length[XFontPath] > 0 && Select[XFontPath, #[1,3] === "tcp"&, 1] === {},
    $XListFonts[f_String] := ($XListFonts[f] = XListFonts[If[f[1]<=>"*","*",""]//f//If[f[-1]<=>"*","*",""]])];
  $XListFonts[_] := {}];

! Default Hint Database for Font Substation
With[{SubstitutionHints = {	(* XLFD per Family substitution hints *)
  "XLFD:Registry:symbol"->{"adobe-symbol"},
  "XLFD:Foundry:fixed"->{"misc"},
  "XLFD:Foundry:helvetica"->{"aladdin", "wri"},
  Null[]}},

  PkgConfig$TypeList["Tkinter"->
    ((#[[1]]->_String|{___String})&/@SubstitutionHints)];
  PkgConfig$DefaultList["Tkinter"->SubstitutionHints]];

With[{SubstitutionHints = {	(* XLFD Font Family substitution hints *)
  "XLFD:Family:helvetica"->{"helvetica neue", "helvetica"},
  "XLFD:Family:times"->{"utopia", "times"},
  Null[]}},

  PkgConfig$TypeList["Tkinter"->
    ((#[[1]]->_String|{__String})&/@SubstitutionHints)];
  PkgConfig$DefaultList["Tkinter"->SubstitutionHints]];

! Major FontFamily/Weight/Slant/Option list
FontFamily = Alternatives[
  "agate", "american typewriter", "andale mono", "annstone",
  "apple chancery", "apple ligothic", "apple ligothic medium", "apple lisung",
  "apple lisung light", "apple symbols", "applegothic", "applemyungjo",
  "arial", "arial black", "arial narrow", "arial rounded mt bold",
  "arnoldboecklin", "baskerville", "becker", "biaukai", "big caslon",
  "blippo", "bodoni", "braille", "brush script mt", "brushstroke",
  "caligula", "capri", "carrickcaps", "chalkboard", "charter", "cheq",
  "classicheavylight", "clean", "clearlyu", "clearlyu alternate glyphs",
  "cochin", "comic sans ms", "cooper", "copperplate", "coronetscript",
  "courier", "courier ce", "courier new", "cracklingfire", "crillee",
  "cuneifontlight", "davysbigkeycaps", "didot", "dobkinscript", "dragonwick",
  "elizabethann", "engraver", "eras", "fang song", "fangsong ti",
  "fixed", "florencelight", "frizquadrata", "futura", "futura_poster",
  "garamond", "geeza pro", "geneva", "geneva ce", "genoa", "georgia",
  "gill sans", "goodcitymodern(kbd)", "goodcitymodern(seq)", "gothic",
  "goudyoldstyle", "helvetica", "helvetica ce", "helvetica neue",
  "herculanum", "hoefler text", "impact", "lucida", "lucida grande",
  "lucidabright", "lucidatypewriter", "luxi mono", "luxi sans", "luxi serif",
  "marker felt", "monaco", "monaco ce", "new century schoolbook",
  "newspaper", "nil", "oldtown", "open look cursor", "open look glyph",
  "optima", "papyrus", "parkavenue", "rechtmanscript", "roostheavy",
  "rudelsberg", "salter", "shalomoldstyle", "shalomscript", "shalomstick",
  "shohlfold", "skia", "slogan", "song", "song ti", "spookyplain",
  "symbol", "tekton", "tempofont", "terminal",
  "times", "times ce", "times new roman", "trebuchet ms", "tribeca",
  "utopia", "verdana", "victoriassecret", "webdings", "windsordemi",
  "zaleskicaps", "zapf dingbats", "zapfino",
  Null[]];
FontWeight = "medium"|"bold";
FontSlant  = "reversed oblique"|"reversed italic"|"roman"|"italic"|"oblique";
FontOption = "underline"|"overstrike";

With[{
  (* Font system independent definitions *)
  $FontWeight = {
    {"ultralight",			"thin"},
    {"extralight"},
    {"light"},
    {"semilight",	"demilight",	"book"},
    {"medium",				"regular"},
    {"semibold",	"demibold"},
    {"bold"},
    {"extrabold",			"heavy"},
    {"ultrabold",			"black"},
    Null[]},

  (* XLFD specification *)
  XLFDspec = {
    Foundry->String,
    Family->String, Weight->String, Slant->String, SetWidth->String,
    AddStyle->String, PixelSize->Real, PointSize->Real,
    ResolutionX->Real, ResolutionY->Real, Spacing->String,
    AverageWidth->Real, Registry->String, Encoding->String},
  XLFDdef = {
    Foundry->"*",
    Family->"*", Weight->"medium", Slant->"r", SetWidth->"normal",
    AddStyle->"", PixelSize->"*", PointSize->"*",
    ResolutionX->"*", ResolutionY->"*", Spacing->"*",
    AverageWidth->"*", Registry->"*", Encoding->"*"},
  XLFDslant = {
    "ro"->"reversed oblique",
    "ri"->"reversed italic",
    "r"->"roman",
    "i"->"italic",
    "o"->"oblique"},

  (* Misc. symbols *)
  EscapeCharacters = {"\\", " ", "\t"},
  Otherwise = True},

  (* Override FontWeight *)
  FontWeight = Alternatives@@Flatten[$FontWeight];

  (* String Escape/Unescape manipulator *)
  Font$Escape[s_String] := StringJoin@@(Switch[#,
    Alternatives@@EscapeCharacters, Null["\\", #],
    _, #]&/@Characters[s]);

  Font$Unescape[s_String] := Module[{escape = False},
    StringJoin@@(If[escape, escape = False; #,
      Switch[#,
	"\\", escape = True; Null[],
	_, #]]&/@Characters[s])];

  Font$SplitUnescapedSpace[s_String] := Module[{escape = False, tmp = ""},
    Join[If[escape, escape = False; tmp = tmp//#; Null[],
      Switch[#,
	"\\", escape = True; Null[],
	" ", With[{out = tmp}, tmp = ""; out],
	_, tmp = tmp//#; Null[]]]&/@Characters[s],
      If[tmp <=> "", {tmp}, Null[]]]];

  (* FontQ family *)
  FontQ$XLFD[fn_]   := And[StringQ[fn], fn[1] === "-", fn[-1] <=> "-"];

  FontQ$TkFont[fn_] := And[StringQ[fn], fn[1] <=> "-", True];

  (* Font name space encoder *)
  FontEncode$XLFD[fn_List] := Module[{xlfd},
    xlfd = {Foundry, Family, Weight, Slant, SetWidth,
      AddStyle, PixelSize, PointSize, ResolutionX, ResolutionY, Spacing,
      AverageWidth, Registry, Encoding}/.Override[fn, XLFDdef];
    xlfd[[4]] = ToLowerCase[xlfg[[4]]]/.(Reverse/@XLFDslant);
    StandardForm[StringJoin@@Flatten[Thread[{"-", xlfd}]]]];

  FontEncode$XLFD[foundry_String, family_String, weight_String, slant_String,
    size_Real, registry_String, opt_List] := StandardForm[
      StringJoin["-", foundry, "-", family, "-", weight, "-",
	slant/.(Reverse/@XLFDslant), "-normal-*-", Round[size], "-*-*-*-*-*-",
	registry, If[StringPosition[registry, "-"] === {}, "-*", Null[]]]];

  FontEncode$XLFD[family_String, weight_String, slant_String,
    size_Real, opt_List:{}] := Module[{subst, break, foundry, registry},
      {foundry, registry} = With[{
	$conf = PkgConfig["Tkinter", "XLFD:"//#//":"//family]},
	Switch[$conf,
	  {___String},	Append[$conf, "*"],
	  _String,	{$conf, "*"},
	  _,		{"*"}]]&/@{"Foundry", "Registry"};
   
      break = False;
      Scan[With[{$foundry = #}, Scan[With[{$registry = #},
	subst = FontEncode$XLFD[$foundry, family,
	  weight, slant, 0, $registry, opt];
	If[Length[$XListFonts[subst]] > 0,
	  foundry = $foundry; registry = $registry;
	  break = True; Break[]]]&, registry]; If[break, Break[]]]&, foundry];
      If[Not[break], foundry = "*"; registry = "*"];
      FontEncode$XLFD[foundry, family, weight, slant, size, registry, opt]];

  FontEncode$TkFont[family_String, weight$_String, slant_String,
    size_Real, opt_List:{}] := Module[{weight},
      (* Remaping weight for TkFont *)
      weight = weight$/.{"medium"->"normal"};
      StandardForm[StringJoin[Font$Escape[family], " ", Round[size],
	If[weight === "", Null[], Null[" ", weight]],
	If[slant  === "", Null[], Null[" ",  slant]],
	Null@@Flatten[Thread[{" ", opt}]]]]];

  (* Font name space decoder *)
  FontDecode[fn_] := (FontDecode[fn] = Override[Which[
    FontQ$XLFD[fn],   FontDecode$XLFD[fn],
    FontQ$TkFont[fn], FontDecode$TkFont[fn],

    Otherwise, {}],
    Family->$DefaultSansSerifFont, PixelSize->$DefaultFontSize,
    Weight->$DefaultFontWeight, Slant->$DefaultFontSlant, Option->{}]);

  FontDecode$XLFD[fn_String] := Module[{split,x,y},
    With[{pos = StringPosition[fn, "-"]},
      split = MapThread[fn,
	{pos[[,1]]+1, Append[Rest[pos[[,2]]], 0]-1}]];
(*    Append[MapThread[
      ReplacePart[#,Check[Switch[#,
	_->Real,   If[#2 <=> "*", ToExpression[#2], #2],
	Slant->_,  #2/.XLFDslant,
	_->String, #2,
	_,         #2], #2],{2}]&,
      {XLFDspec, Join[split, Table["",{Max[0,Length[XLFDspec]-Length[split]]}]]}],*)
    Append[Thread[
      {XLFDspec, Join[split, Table["",{Max[0,Length[XLFDspec]-Length[split]]}]]}]/.
      {
        {x_->Real,"*"}:>(x->"*"),
        {x_->Real,y_}:>(x->ToExpression[y]),
	{Slant->_, y_}:>(Slant->(y/.XLFDslant)),
	{x_->_,y_}:>(x->y)},
      Option->{}]];

  FontDecode$TkFont[fn_String] := With[{split = Font$SplitUnescapedSpace[fn]},
    Override[Switch[Length[split],
      0, {},
      1, {Family->split[[1]]},
      _, {Family->split[[1]], PixelSize->ToExpression[split[[2]]]}],
      Switch[#,
	"normal",	Weight->"medium",
	FontWeight,	Weight->#,
	FontSlant,	Slant->#,
	_, Null[]]&/@Take[split, {3, -1}],
      Option->(Switch[#,
	FontOption, #,
	_, Null[]]&/@Take[split, {3, -1}]),
      Weight->"medium", Slant->"roman"]];

  (* GetFont family *)
  GetFontFamily[f$_String] := Check[
    GetFontFamily[f$] =    Family/.FontDecode[f$], $DefaultSansSerifFont];

  GetFontSize[f$_String] := Check[
    GetFontSize[f$]   = PixelSize/.FontDecode[f$], $DefaultFontSize];

  GetFontWeight[f$_String] := Check[
    GetFontWeight[f$] =    Weight/.FontDecode[f$], $DefaultFontWeight];

  GetFontSlant[f$_String] := Check[
    GetFontSlant[f$]  =     Slant/.FontDecode[f$], $DefaultFontSlant];

  (* Query available font size for X font *)
  XListFontSize[family_, weight_, slant_] := StandardForm[With[{
    pattern = StringJoin["-", Switch[family, "fixed", "misc", _, "*"],
      "-", family, "-", weight, "-", slant/.(Reverse/@XLFDslant), "-*"]},
    XListFontSize[family, weight, slant] = Union[GetFontSize/@
      Select[$XListFonts[family], StringMatchQ[#, pattern]&]]]];

  (* FontSubstitute API *)
  FontSubstitute$X11[family$_, weight$_, slant$_, size_] := Module[{
    family = family$, weight = weight$, slant = slant$,
    medium = Position[$FontWeight, "medium"][[1,1]],
    hit, pos, families, weights, slants},

    If[$XListFonts[family] === {}, (* FontList is not found. *)
      Returun[FontSubstitute$X11[family, weight, slant, size]
	= {family, weight, slant, Round[size]}]];

    hit = XListFontSize[family, weight, slant];

    If[hit === {}, (* family/weight/slant substitution *)
      (* family substitution *)
      families = FontFamilySubstitute$X11[family];

      (* Check $FontWeight list *)
      pos = Position[$FontWeight, weight];
      pos = If[pos === {}, medium, pos[[1,1]]];

      (* List up weight substitution series *)
      weights = Prepend[Which[
	pos < medium, Join[Complement[$FontWeight[[pos]], {weight}],
	  Flatten[$FontWeight[[Range[pos + 1, medium, +1]]]]],
      
	pos > medium, Join[Complement[$FontWeight[[pos]], {weight}],
	  Flatten[$FontWeight[[Range[pos - 1, medium, -1]]]]],

	Otherwise,         Complement[$FontWeight[[pos]], {weight}]], weight];

      (* List up slant substitution series *)
      slants = Switch[slant,
	"italic", {"italic", "oblique"},
	"oblique", {"oblique", "italic"},
	"reversed oblique", {"reversed oblique", "reversed italic"},
	"reversed italic", {"reversed italic", "reversed oblique"},
	_, {}];

      Scan[(If[hit <=> {}, Break[], family = #];
	(* Try weight-slant pairs *)
	Scan[If[(hit = XListFontSize[family, #[[1]], #[[2]]]) <=> {},
	  weight = #[[1]]; slant = #[[2]]; Break[]]&,
	  Flatten[Thread[{#, slants}]&/@weights, 1]];

	If[hit <=> {}, Break[]];
	(* Try roman slant *)
	Scan[If[(hit = XListFontSize[family, #, "roman"]) <=> {},
	  weight = #; slant = "roman"; Break[]]&, weights];
	)&, families];
      ];

    If[hit === {}, (* Replace by default if possible *)
      family = $DefaultSansSerifFont;
      weight = $DefaultFontWeight;
      slant  = $DefaultFontSlant;
      hit = XListFontSize[family, weight, slant]];

    If[hit === {}, (* no-cache result if substitution font is not found *)
      Return[{family$, weight$, slant$, size}]];

    (* cache substitution *)
    FontSubstitute$X11[family, weight, slant, size] = Switch[
      hit,
      {0,___}, {family, weight, slant, Round[size]},
      _,       {family, weight, slant,
	Sort[Thread[{Abs[hit / size - 1], hit}]][[1,2]]}]];

  (* Put font family substitute rule into dbRules *)
  (* Style: alternatives, {substitute font family list}, ... *)
  FontFamilySubstitute[family$_String, {dbRules___}] := Module[{
    expanded, families = {family$}},
    expanded[_] := False; expanded[Continue] = True;
    While[expanded[Continue], expanded[Continue] = False;
      families = Flatten[Map[With[{expansion = If[expanded[#], #,
	Switch[#,
	  dbRules,	(* Expand external rule set *)

	  (* Don't expand $Default*Font by fallback rule *)
	  $DefaultSansSerifFont,	$DefaultSansSerifFont,
	  $DefaultSerifFont,		$DefaultSerifFont,
	  $DefaultFixedFont,		$DefaultFixedFont,
	  $DefaultTerminalFont,		$DefaultTerminalFont,
	  $DefaultSymbolFont,		$DefaultSymbolFont,

	  (* Fallback to $DefaultSansSerifFont *)
	  _, {#, $DefaultSansSerifFont}]]},
	expanded[#] = True;
	expanded[Continue] = Or[expanded[Continue],
	  Not[And@@Map[expanded[#]&, expansion]]];
	expansion]&, families]]];
    Override[families]];
  SetAttributes[FontFamilySubstitute, HoldRest];

  FontFamilySubstitute$X11$New[] := (Clear[FontFamilySubstitute$X11];
    With[{db = Flatten[Map[With[{key = #[13,-1], val = PkgConfig["Tkinter", #]},
      Switch[val,
	{__String},	If[Last[val] === key, {Alternatives@@val, val},
			  {Alternatives@@Append[val, key], Append[val, key]}],
	_String,	{Alternatives[val], {val}},
	_,		Null[]]]&,
      PkgConfigMatch["Tkinter", "XLFD:Family:*"]], 1]},
      FontFamilySubstitute$X11[family$_String] := (
	FontFamilySubstitute$X11[family$] = FontFamilySubstitute[family$, db])];
    FontFamilySubstitute$X11[] := FontFamilySubstitute$X11$New[];);
  FontFamilySubstitute$X11$New[];

  (* Public API *)
  TextFont[___,"cursor",___] := "cursor";
  TextFont[args__] := StandardForm[
    TextFont[args] =  Module[{foundry, family, weight, slant, size, opt, rem},
      {size, rem} = SwitchCases[{args}, {_Real, _}];
      {opt, slant, weight, family} = SwitchCases[ToLowerCase/@rem,
	{FontOption, FontSlant, FontWeight, _}];
      family = If[family === {}, $DefaultTerminalFont,	First[family]];
      slant  = If[slant  === {}, $DefaultFontSlant,	First[slant]];
      weight = If[weight === {}, $DefaultFontWeight,	First[weight]];
      size   = If[size   === {}, $DefaultFontSize,	Round[First[size]]];

      (* Remaping `symbol' font to $DefaultSymbolFont *)
      If[family === "symbol", family = $DefaultSymbolFont];
      If[family === "fixed", family = $DefaultFixedFont];

      (* Remaping `Italic' slant to `Oblique' for some spicial font family *)
      With[{SpecialFonts = Alternatives["helvetica", "courier", "avantgarde"]},
	Switch[{family, slant},
	  {SpecialFonts,          "italic"}, slant =          "oblique",
	  {SpecialFonts, "reversed italic"}, slant = "reversed oblique",
	_, (* Nothing TODO *)]];

      Switch[$FontSystem,
	"Aqua",	( (* Aqua font rendering system(Tk encode) *)
	  FontEncode$TkFont[family, weight, slant, size, opt]),

	"Xft",	( (* Xft font rendering system(Tk encode) *)
	  FontEncode$TkFont[family, weight, slant, size, opt]),

	_,	( (* X11 font rendering system(XLFD encode) *)
	  (* Search substitute font via XLFD namespace *)
	  {family, weight, slant, size} = FontSubstitute$X11[
	    family, weight, slant, size];

	  Switch[$FontEncode,
	    "TkFont", FontEncode$TkFont[family, weight, slant, size, opt],
	    _,        FontEncode$XLFD[family, weight, slant, size, opt]])]]];
  ];

AdjustWindowGeometry[Widget[w_,_Window]]:=
  (w[Geometry]="";Update[IdleTasks]);
AdjustWindowGeometry[Widget[w_,wid_[master_,___]]]:=
  AdjustWindowGeometry[master];
AdjustWindowGeometry[Widget[w_,wid_[Root$Window,___]]]:=None;

ToGeometry[{w_,h_,x_,y_}]:=StandardForm[w//"x"//h//
  SignAttached[x]//SignAttached[y]];
ToGeometry[{w_,h_}]:=StandardForm[w//"x"//h];
ToGeometry[{,,x_,y_}]:=StandardForm[SignAttached[x]//SignAttached[y]];
ToGeometry[x__]:=ToGeometry[{x}];
FromGeometry[s_String]:=
  ToExpression["{"//s[1,#[[1,1]]-1]//","//s[#[[1,1]]+1,#[[2,1]]-1]
    //","//s[#[[2,1]]+1,#[[3,1]]-1]//","//s[#[[3,1]]+1,-1]//"}"]&[
      StringPosition[s,{"x","+","+"}]];
SignAttached[x_]:=StandardForm[If[x>=0,"+","-",""]//Abs[x]];

TkReturn[arg_:Null]:=(Tk$Result=arg;TkQuitEventLoop[]);
TkWait[]:=(Tk$Result=Null;TkEventLoop[];Tk$Result);
TkBreak[]:=TclEval["break"];
With[{dt=0.2},
  TkSense[t_:dt]:=Module[{t0=FromDate[Tick->0.01]+t,r=t},
    Tk$Result=Null;
    While[
      Tcl["update"];
      Tk$Result===Null&&
        (Pause[Min[r,dt]];(r=t0-FromDate[Tick->0.01])>0),];
    Tk$Result]];
SetAttributes[{EndOfTkSense,TkReturn,TkWait,TkSense},Constant];
WaitExpression[v_,dt_:0.3]:=Module[{v0=v},
  While[v===v0,If[TkSense[dt]<=>Null,Return[]]];Tk$Result];
SetAttributes[WaitExpression,HoldAll];

(* Python *)
Python:=Module[{s},While[
  WriteString[6,">>>"];
  s=ReadString[-1];
  s<>"$End",
  PyEvalString[s]]];

(* Py* emulation *)
PyWait=TkWait;
PySense=TkSense;
PyReturn=TkReturn;
PyInitialize=TkInitialize;
With[{p=Py$Echo,bQ=BoundQ[Py$Echo]},
  Clear[Py$Echo];
  (Py$Echo=a_)^:=(Tk$Echo=a);
  Py$Echo:=Tk$Echo;
  If[bQ,Py$Echo=p]];

TclEval["bind Entry <Key-Delete> {if [%W selection present] {\
    %W delete sel.first sel.last \
    } else {%W delete [expr [%W index insert] - 1] insert}}"];
TclEval["bind Spinbox <Key-Delete> {if [%W selection present] {\
    %W delete sel.first sel.last \
    } else {%W delete [expr [%W index insert] - 1] insert}}"];
TclEval["bind Text <Key-Delete> {if [string compare [%W tag ranges sel] {}] {\
    %W delete sel.first sel.last \
    } else {%W delete {insert -1 chars} insert}}"];
(* TclEval["bind Canvas <Button-4> {%W yview scroll -1 units}"];
TclEval["bind Canvas <Button-5> {%W yview scroll 1 units}"]; *)
TclEval["bind Text <Button-4> {%W yview scroll -1 units}"];
TclEval["bind Text <Button-5> {%W yview scroll 1 units}"];
TclEval["bind Listbox <Button-4> {%W yview scroll -1 units}"];
TclEval["bind Listbox <Button-5> {%W yview scroll 1 units}"];

TclReturn[s_,String]:=TclEval[s,True];
TclReturn[s_]:=TclEval[s,True];
TclReturn[s_,form_]:=ToReturnForm[TclEval[s,True],form];

ToReturnForm[s_]:=s;
ToReturnForm[s_,String]:=s;
ToReturnForm[s_,Real]:=ToExpression[s];
ToReturnForm[s_,Widget]:=TkWidget[s];
ToReturnForm[s_,WidgetList]:=TkWidget/@ToReturnForm[s,StringList];
ToReturnForm[s_,TextIndex]:=
  ToExpression["{"//StringReplace[s,"."->","]//"}"];
ToReturnForm[s_,TextIndexList]:=
  ToExpression["{{"//StringReplace[StringTrim[s],{"."->","," "->"},{"}]//"}}"];
ToReturnForm["",TextIndexList]={};
ToReturnForm[s_,List]:=ToExpression["{"//StringReplace[StringTrim[s]," "->","]//"}"];
ToReturnForm[s_,StringList]:=Module[{str, escape, bracket, fill, output},
  str = ""; escape = False; bracket = 0; fill = False;
  With[{c = #},
    Which[
      output = False;
      c === " " && Not[escape] && Not[bracket > 0], (output = True),

      fill = True;
      escape, (str = str//c; escape = False),
      c === "\\", (escape = True),
      c === "{",  (If[bracket > 0,  str = str//c]; bracket += 1),
      c === "}",  (bracket -= 1; If[bracket > 0,  str = str//c]),
      
      True, (str = str//c)];
    If[output, With[{str$ = str, fill$ = fill}, str = ""; fill = False;
      If[fill$, str$, Null[]]], Null[]]]&/@Characters[s//" "]];
ToReturnForm[s_,f_]:=Module[
  {fn=StringToStream[s],r},
  r=Check[Read[fn,f],];
  Close[fn];
  r];

Bell[]:=TclEval["bell"];
Unprotect[Update,Focus,Raise,Lower,Popup];
Update[]:=TclEval["update"];
Update[IdleTasks]:=TclEval["update idletasks"];
Update[WindowTasks]:=TclEval["update windowtasks"];
Update[FileTasks]:=TclEval["update filetasks"];
Update[TimerTasks]:=TclEval["update timertasks"];
Update[TkTasks]:=TclEval["update windowtasks timertasks idletasks"];
Update[x_,y__]:=Scan[Update,{x,y}];
Update[_]=Null;
Focus[]:=TclReturn["focus",Widget];
Raise[Widget[w_,_]]:=TclEval["raise "//TkPathName[w]];
Lower[Widget[w_,_]]:=TclEval["lower "//TkPathName[w]];
Popup[Widget[m_,Menu[__]],{x_,y_},ent_:1]:=StandardForm[TclEval["tk_popup "//TkPathName[m]//" "//TclArg[{x,y}]//TclArg[SpecialIndex[ent]]]];
SetAttributes[{Update,Bell,TclReturn,ToReturnForm,
  WindowTasks,FileTasks,TimerTasks,IdleTasks,Focus,Raise,Lower,Popup},
  Constant];
TkChooseColor[c_:"white",t_:"Color"]:=StandardForm[TclReturn[
  "tk_chooseColor -initialcolor {"//c//"} -title {"//t//"}",String]];

Select$BG={"wheat","AntiqueWhite1","aquamarine1","bisque1","burlywood1",
  "CadetBlue1","chartreuse1","chocolate1","coral1","cornsilk1",
  "cyan1","DarkGoldenrod1","DarkOliveGreen1","DarkOrchid1",
  "DarkOrange1","DarkSeaGreen1","DarkSlateGray1","DeepPink1",
  "DeepSkyBlue1","DodgerBlue1"};
Tkinter$BG[]:=Module[{d=Date[Tick->0.1]},
  Select$BG[[Mod[d[[5]]*600+d[[6]]*10,Length[Select$BG]]+1]]];
TkOptionAdd[x_,y_]:=StandardForm[TclEval["option add "//x//" "//y]];
TkOptionGet[w_,y_]:=StandardForm[TclEval["option get "//TkPathName[w]//" "//y//" *",1]];
SetAttributes[TkOptionGet,HoldFirst];
KBF$ABG=Tkinter$BG[];
TkOptionAdd["*Background","#e8e8e8"];
TkOptionAdd["*highlightBackground","#e8e8e8"];
TkOptionAdd["*selectBackground",Tkinter$BG[]];
TkOptionAdd["*selectForeground","black"];
TkOptionAdd["*cursor","left_ptr"];
TkOptionAdd["*activeForeground","black"];
TkOptionAdd["*activeBackground",KBF$ABG];
TkOptionAdd["*Entry*disabledForeground","#020202"];
TkOptionAdd["*Entry*disabledBackground","#efefff"];
TkOptionAdd["*Spinbox*disabledForeground","#020202"];
TkOptionAdd["*Spinbox*disabledBackground","#efefff"];
  TkOptionAdd["*selectColor",Switch[$FontSystem,
    "Xft",
    "#e0f0f0",
    _,
    "#20ffe0"]
    ];
TkOptionAdd["*Menu*selectColor","red"];

Tkinter::override="Widget `1` is going to be overridden";
Tkinter::nonexist="Widget `1` does not exist";
Tkinter::undef="`1` undefined";
Tkinter::destroy="Window `1` is destroyed";
Tkinter::undefmaster="Undefined master `1`";

With[{p=ReturnToSAD},
  Clear[ReturnToSAD];
  ReturnToSAD[]:=(
    ReturnToSAD[$Window]=Window[];
    ReturnToSAD[$Window][Title]=StandardForm["SAD"//GetPID[]];
    ReturnToSAD[$Window][Geometry]="+6+23";
    ReturnToSAD[$Button]=Button[ReturnToSAD[$Window],Text->"Return to SAD"];
    ReturnToSAD[$Button][Command]:=TkReturn["ReturnToSAD"];
    Bind[ReturnToSAD[$Window],"<Destroy>",Exit[]];
    Update[IdleTasks]);
  If[p<=>False,ReturnToSAD[]]];

(* Wish on SAD/Tkinter *)
Wish:=Module[{s},
  Off[Tkinter::tclerror];
  While[WriteString[6,"% "];
    s=ReadString[-1];
    s<>"exit",
    Check[Print[TclReturn[s]],]];
  On[Tkinter::tclerror];];

Unprotect[Index];Clear[Index];Protect[Index];

! Convenience functions

BusyCursor[w_] := (Change$Cursor[Hold[w],"watch"];Update[];);
NormalCursor[w_] := (Change$Cursor[Hold[w],"left_ptr"];Update[];);
ChangeCursor[w_,c_] := (Change$Cursor[Hold[w],c];Update[];);
SetAttributes[{BusyCursor,NormalCursor,ChangeCursor},HoldFirst];

Change$Cursor[w_,c_] := Module[{cw = Map[Hold,Extract[w,{1},ChildWidget]]},
  If [Length[cw]>0, Scan[Change$Cursor[#,c]&,cw]];
  With[{we=First[w]},we[Cursor] = c];
  ];

ListAllWidgets[] := ListChildWidgets[Root$Window];
ListChildWidgets[w_] := Module[{l=Hold[],lc},
  With[{w=If[w===Root$Window,Root$Window,Extract[w,{1},Unevaluated$]]},
    AppendTo[l,Unevaluated[w]];
    If [(lc=ChildWidget[w])<=>Hold[],
      Scan[(
        l = Join[l,ListChildWidgets[#]];
      )&,lc];
    ];
  ];
  l
];

! Property thing

SetFrameIDProp[] := StandardForm[
  XSetTextProperty[Tk$ShellID,FrameID$Atom,ToString[Tk$RootID]]];
SetAppNameProp[] := 
  XSetTextProperty[Tk$RootID,AppName$Atom,ApplicationName[]];

GetCommandProp[] := XGetWindowProperty[Tk$RootID,Com$Atom,True];
GetResultProp[] := XGetWindowProperty[Tk$RootID,Result$Atom,True];
AppNames[] := Module[{wl,al={},ids,id,an},
  App$List = {};
  wl = Third[XQueryTree[0]];
  Scan[(
    If ["***"<=>(ids=XGetTextProperty[#,FrameID$Atom])<=>Null,
      an = XGetTextProperty[ToExpression[ids],AppName$Atom];
      AppendTo[App$List, {an, ToExpression[ids]}];
      al = {al,an};
    ];
  )&,wl];
  Flatten[al]
];
AppNameToID[an_] := Module[{al,a},
  al = AppNames[];
  If [(a=Cases[App$List,{an,_}])<=>{}, a[[1,2]], Null]
];

Send$Stream[_] = 0;
Send[app_,s_String,atom_:Com$Atom] := Module[{n},
!Print[{"send string",{s,MemoryCheck[]}}];
  If [(n=Send$Stream[app]) <=> 0,
    StandardForm[Write[n,If[atom==Com$Atom,"c","r"]//s]];
    Flush[n];
  ,!Else
    If [(n=AppNameToID[app])<=>Null,
      XChangeProperty[n,atom,1,3,s];
      XFlush[];
    ];
  ];
];
Send[app_,comm_,atom_:Com$Atom] := StandardForm[
  With[{com$=ToString[Unevaluated$[comm],HoldForm]}, Send[app,com$,atom]]];
SendCallback[app_,comm_String,cb_] := StandardForm[
  With[{com="ComReturn[\""//ApplicationName[]//"\","//Com$Ser//","//comm//"]"},
    Send[app,com]];
  AppendTo[Com$List, {Com$Ser,Hold[cb]}];
  Com$Ser++];
SendCallback[app_,comm_,cb_] := StandardForm[
  With[{com=ToString[comm,HoldForm]}, SendCallback[app,com,cb]]];
SetAttributes[{Send,SendCallback},HoldRest];
ComReturn[app_,ser_,r_] := Send[app,{ser,r},Result$Atom];
Property$CB[] := Module[{cl$,r$,n$,cbf$},
  If [(cl$=GetCommandProp[])<=>Null,
    Scan[ToExpression[#]&,cl$];
    Return[];
  ];
  If [(cl$=GetResultProp[])<=>Null,
    Scan[(
      r$ = ToExpression[#];
      If [(n$=Position[Com$List,{First[r$],_},1,1])<=>{},
        cbf$=Com$List[[n$[[1,1]],2]];
        Com$List = Delete[Com$List,First[n$]];
        Com$Result = Second[r$];
        First[cbf$];
      ];
    )&,cl$];
  ];
];
Map$CB[] := (
  Bind[Widget[Root$Window,],"<Map>",];!Print["map"];
  Reparent$CB[];
);
Reparent$CB[] := (
  Tk$ShellID = FindShellID[Tk$RootID];!Print[{"set id",Tk$ShellID}];
  SetFrameIDProp[];
);
FindShellID[wt_Real] := Module[{w=wt,wl},
  While[wl=XQueryTree[w]; (wl<=>Null)&&(Second[wl]<>First[wl]), w = Second[wl]];
  If [wl===Null,Null,w]
];

Protect[Send,SendCallback,SetFrameIDProp,SetAppNameProp,GetCommandProp,
  GetResultProp,AppNames,AppNameToID,ComReturn,Reparent$CB,Property$CB,FindShellID];

Com$Atom = XInternAtom["KEKB_COMMAND", False];
Result$Atom = XInternAtom["KEKB_RESULT", False];
FrameID$Atom = XInternAtom["KEKB_WINDOW_ID", False];
AppName$Atom = XInternAtom["KEKB_APP_NAME", False];
Protect[Com$Atom,Result$Atom,FrameID$Atom,AppName$Atom];
Tk$RootID = WidgetInformation[Root$Window,ID];
Tk$ShellID = Tk$RootID;
Com$List = {};
Com$Ser = 1;

SetFrameIDProp[];
SetAppNameProp[];
AppNames[];
Bind[Widget[Root$Window,],"<Property>",Property$CB[]];
Bind[Widget[Root$Window,],"<Reparent>",Reparent$CB[]];
Bind[Widget[Root$Window,],"<Map>",Map$CB[]];

!
! Images
!

Actions[Image]=Height|Width|Type;
Actions[BitmapImage]=Actions[Image];
Actions[PhotoImage]=Prepend[Actions[Image],Blank];

Options[BitmapImage]=Background|File|Foreground|MaskFile;
Options[PhotoImage]=Format|File|Gamma|Height|Palette|Width;

Images={BitmapImage,PhotoImage};
ImageName[x_]:=(ImageName[x]=ToLowerCase[ToString[x][1,-6]]);

DefineImage[w_]:=(
  (a_=w[name_,opt___])^:=(
      If[TkImagePathName[a]<>"",DeleteImage[a,False]];
      (a[b$a_]=c$a_)^:=ConfigureImage[a,b$a->c$a];
      (a[b$a_]:=c$a_)^:=ConfigureImage[a,b$a:>c$a];
      (a=.)^:=DeleteImage[a];
      a=CreateImage[Image[a,w[name,opt]]]));
Scan[DefineImage,Images];

Image[a_,___][Name]:=TkImageName[a];
Image[b__][c_]:=ConfigureImage[Image[b],c];
(Image[b__][c_]=d_)^:=ConfigureImage[Image[b],c->d];
(Image[b__][c_]:=d_)^:=ConfigureImage[Image[b],c:>d];

With[{r=Rule|RuleDelayed},
  CreateImage[Image[w_,wid_[tkname_,opt___]]]:=Module[
    {name=TkSymbol[w],
      {opts,act}=SwitchCases[{opt},
        {r[Options[wid],_],
          r[Actions[wid],_]|Actions[wid]|Actions[wid][__]}],
      optstr,d},
    StandardForm[
      optstr=TclArg[opts];
      TclEval["image create "//ImageName[wid]//" "//tkname//" "//optstr];
      TkImagePathName[w]=name;
      TkImageName[w]=tkname;
    ];
    Image[w,d]/.d->wid[tkname,Null@@opts]]];

DeleteImage[Image[w_,_[___]],b$_:True]:=Module[{n=TkImageName[w]},
  If[n<>"",
    If[b$, TclEval["image delete "//n]];
    TkImagePathName[w]=.;
    TkImageName[w]=.;
    Clear[w]]];
DeleteImage[w__]:=Scan[DeleteImage,{w}];
DeleteImage[_]:=Null;

Configure[p:Image[w_,wid_[__]],opt_]:=Module[{name=TkImagePathName[w],
  {act,opts}=SwitchCases[{opt},{Actions[wid],r[Options[wid],_]}]},
  StandardForm[TkEvalActions[name,act]]];

TkImagePathName[_]="";
TkImagePathName[None]="None";
TkImageName[_]="";
TkImageName[None]="None";

TkDefineBitmap["blhst",Table[0x33,{8}],8,8];
TkDefineBitmap["blhst1",Table[0x44,{8}],8,8];
TkDefineBitmap["blvst",{0xff,0xff,0,0,0xff,0xff,0,0},8,8];
TkDefineBitmap["blvst1",{0,0,0xff,0,0,0,0xff,0},8,8];

SetAttributes[{Image,TkImagePathName,TkImageName},HoldAll];

(* Register system symbols *)
System$Names = Join[System$Names,Complement[Names["*"],Tkinter$Names0]];
Tkinter$Names0=.;

On[General::unprotconst];

! End of File
