NearestElement[j_,ks_,candidate_,mast_,ExcludeItself_:False]:=
!--- find nearest element to j among candidate, and returns its Master element. ---
!    Restrictions: candidate must be in ascending order. (candidate can include slave element.)
Module[
  {k,ca,p,pl,pr,jl,jr,sl,sr,nc,dr},
  k=ks;
  ca=If[ ExcludeItself
     , p=Position[candidate,j];
       Drop[candidate,If[Length[p]>0,p[1],p]]
     , candidate ];
  nc=Length[ca];
  If[FLAG['RING']
  , If[ca[k]>j,k=1];
    pl=nc;Do[If[ca[i]>j,If[i<>1,pl=i-1;Break[],pl=nc;Break[]]],{i,k,nc}];
    pr=1;Do[If[ca[i]>=j,pr=i;Break[]],{i,If[ca[pl]>j,1,pl],nc}];
    jl=If[mast[ca[pl]]<0,-mast[ca[pl]],ca[pl]];
    jr=If[mast[ca[pr]]<0,-mast[ca[pr]],ca[pr]];
    sl=If[ca[pl]>j
       ,  Abs[LINE["s",j]-LINE["s",mast[jl]+1]] + LINE["s",LINE['LENGTH']]
       ,  Abs[LINE["s",j]-LINE["s",mast[jl]+1]] ];
    sr=If[ca[pr]<j
       ,  Abs[LINE["s",j]-LINE["s",jr]] + LINE["s",LINE['LENGTH']]
       ,  Abs[LINE["s",j]-LINE["s",jr]] ];
  ,
    pl=nc;Do[If[ca[i]>j,If[i<>1,pl=i-1;Break[],pl=i;Break[]]],{i,k,nc}];
    pr=pl;Do[If[ca[i]>=j,pr=i;Break[]],{i,pl,nc}];
    jl=If[mast[ca[pl]]<0,-mast[ca[pl]],ca[pl]];
    jr=If[mast[ca[pr]]<0,-mast[ca[pr]],ca[pr]];
    sl=Abs[LINE["s",j]-LINE["s",mast[jl]+1]];
    sr=Abs[LINE["s",jr]-LINE["s",j]];
  ];List[If[sl<sr,jl,jr], pl]
];

NearestMonitors[magnet_,imon_,options___]:=Module[
    {candidate,qu,ip,mast,j,jr,j1,j2,s1,s2,cor={},
     def={},op},
    op=Join[{options},def];
    candidate=LINE["position",imon];
    qu=If[VectorQ[magnet],magnet,{magnet}];
    ip=1; 
    mast=Master[];
    Do[
      j=LINE["position",qu[i]];
      If[mast[j]<0,j=-mast[j]];
      jr=mast[j]+1;
      {j1,ip}=NearestElement[j,ip,candidate,mast];
      {j2,ip}=NearestElement[jr,ip,candidate,mast];
      cor=Append[cor,
            If[j1==j2
            , {j1}
            , If[FLAG["RING"],
                If[j1<=j,
                  s1=LINE["s",j]-LINE["s",j1] ,
                  s1=LINE["s",LINE["length"]]-LINE["s",j1]+LINE["s",j]
                ];
                If[j2>=jr,
                  s2=LINE["s",j2]-LINE["s",jr] ,
                  s2=LINE["s",LINE["length"]]-LINE["s",jr]+LINE["s",j2]
                ]
              , s1=Abs[LINE["s",j]-LINE["s",j1]];
                s2=Abs[LINE["s",j2]-LINE["s",jr]]
              ];
              If[Abs[s2-s1]<1e-10,{j1,j2},If[s1<s2,{j1},{j2}]]
            ]
          ]
    , {i,Length[qu]}
    ];
    If[VectorQ[magnet],cor,cor[1]]
  ];

!Monitor[mon_,offset_:{0,0},prec_:{0,0},fixedtolist_:{}]:=
Monitor[mon_,options___]:=
  Module[{imon,nmon,dx,dy,attachlist,typelist,candidate,mast,ip,j,
    op,def={Offset->{0,0},Jitter->{0,0},AttachTo->NearestMagnet}},
    op=Join[{options},def];
    offset=If[VectorQ[Offset/.op],Offset/.op,{Offset/.op}];
    prec=If[VectorQ[Jitter/.op],Jitter/.op,{Jitter/.op}];
    fixedtolist=AttachTo/.op;
    imon=If[VectorQ[mon],
      If[ VectorQ[mon,NumberQ],
         mon
      ,  Flatten[ 
           { Map[LINE['POSITION',#]&,mon],
             Select[Range[LINE["length"]],MemberQ[mon,LINE["element",#]]&] }  ]
      ],
      Flatten[ 
        { LINE['POSITION',mon],
          Select[Range[LINE["length"]],(LINE["element",#]==mon)&] }  ]
    ];
    imon=Union[imon];
    nmon=Length[imon];
    dx=If[offset[[1]]==0,Table[0,{nmon}],Table[GaussRandom[],{nmon}]*offset[[1]]];
    dy=If[offset[[2]]==0,Table[0,{nmon}],Table[GaussRandom[],{nmon}]*offset[[2]]];
    typelist=LINE["TYPE","*"];
    candidate=Select[Range[LINE["LENGTH"]],(typelist[[#]]==6||typelist[[#]]==4||typelist[[#]]==22)&];
    mast=Master[];
    attachlist=
    If[fixedtolist===NearestMagnet,
      ip=1;
      Table[{j,ip}=NearestElement[imon[i],ip,candidate,mast];j,{i,1,nmon}],
      fixedtolist
    ];
    {imon,{dx,dy},prec,attachlist}
  ];

Steer[str_,options___]:=
  Module[{def,istr,nstr,mast,dx,dddk,hor,qp1=Pi/4,qp3=3*Pi/4,def={Jitter->0,Type->(LINE["type",#]>0&)}},
    op=Join[{options},def];
    If[NumberQ[Type/.op],op=Join[{ToExpression["Type->(LINE['type',#]=="//(Type/.op)//"&)"]},op]];
   !istr=Select[Range[LINE["length"]], LINE['TYPE',#]==type&];
    istr=Select[Range[LINE["length"]],(Type/.op)];
    istr=If[VectorQ[str],
      If[ VectorQ[str,NumberQ],
         Select[str,(Type/.op)]
      ,  Flatten[ 
           { Select[Flatten[Map[LINE['POSITION',#]&,str]],(Type/.op)],
             Select[istr,MemberQ[str,LINE["element",#]]&] }  ]
      ],
      Flatten[ 
        { Select[Flatten[LINE['POSITION',{str}]],(Type/.op)],
          Select[istr,(LINE["element",#]==str)&] }  ]
    ];
    istr=Union[istr];
    nstr=Length[istr];
    If[istr=={},
      {{},{},{},{}}
    , 
!      mast=Master[];
!      istr=Select[istr,mast[#]>0&];
!      mast=mast[istr];
      mast=istr;
      dddk=Jitter/.op;
      dx=If[dddk==0||dddk===Null,Table[0,{nstr}],Table[GaussRandom[],{nstr}]*dddk];
      dx=Map[Plus[1,#]&,dx];
      hor=Map[Abs[Mod[#,Pi]]&, LINE["ROTATE",istr]];
      hor=Map[(#<qp1 || #>qp3)&, hor];
      {istr,mast,hor,dx}
    ]
  ];

DeleteSteer[str_,name_]:=
  Module[{id,pe,n},
      pe=Flatten[ LINE["position",If[VectorQ[name],name,{name}]] ];
      id=Table[If[MemberQ[pe,str[1,i]],str[1,i]+1000000,str[1,i]],{i,Length[str[1]]}];
      n=Apply[Plus,Map[If[#<1000000,1,0]&,id]];
      Table[ Map[Part[#,2]&,Take[Sort[Thread[{id,str[i]}]],n]],{i,Length[str]} ]
  ];

DeleteMonitor[mon_,name_]:=
  Module[{id,pe,n},
      pe=Flatten[ LINE["position",If[VectorQ[name],name,{name}]] ];
      id=Table[If[MemberQ[pe,mon[1,i]],mon[1,i]+1000000,mon[1,i]],{i,Length[mon[1]]}];
      n=Apply[Plus,Map[If[#<1000000,1,0]&,id]];
      MapAt[Map[Part[#,2]&,Take[Sort[Thread[{id,#}]],n]]&,mon,{{1},{2,1},{2,2},{4}}]
  ];

SelectSteer[str_,section_]:=Module[{index,sect},
  sect=LINE["position",section];
  index=Select[Range[Length[str[1]]],BelongToSection[str[1,#],sect]&];
  Map[Part[#,index]&,str]
]

SelectMonitor[mon_,section_]:=Module[{index,sect},
  sect=LINE["position",section];
  index=Select[Range[Length[mon[1]]],BelongToSection[mon[1,#],sect]&];
  MapAt[Part[#,index]&,mon,{{1},{2,1},{2,2},{4}}]
]

DeleteMonitorDataRegion[mon_,section_]:=Module[{index,sect},
  sect=LINE["position",section];
  index=Select[Range[Length[mon[1,1]]],~BelongToSection[mon[1,1,#],sect]&];
  MapAt[Part[#,index]&,mon,{{1,1},{1,2,1},{1,2,2},{1,4},{2,1},{2,2}}]
]

DeleteMonitorRegion[mon_,section_]:=Module[{index,sect},
  sect=LINE["position",section];
  index=Select[Range[Length[mon[1]]],~BelongToSection[mon[1,#],sect]&];
  MapAt[Part[#,index]&,mon,{{1},{2,1},{2,2},{4}}]
]
  
CurrentSteers[]:=Module[{ic},
ic=Select[Range[LINE["length"]-1],LINE["type",#]==2&];
{LINE["K0",ic],ic}
];

ResetSteers[]:=Module[{ic,v},
ic=Select[Range[LINE["length"]-1],LINE["type",#]==2&];
v=LINE["K0",ic];
Do[LINE["K0",ic[i]]=0,{i,Length[ic]}];
{v,ic}
];

RecoverSteers[{str_,istr_},Calc_:False]:=Module[{},
Do[ LINE["K0",istr[i]]=str[i] , {i,Length[istr]} ];
If[Calc,
  If[ ~Equal[Drop[CalculateOptics[1,LINE['LENGTH'],Twiss["*",1],FLAG['CELL'],2][2],-1],{1,1}]
  , If[ ~Equal[Drop[CalculateOptics[1,LINE['LENGTH'],ReplacePart[Twiss["*",1],0,{{16},{17},{18},{19}}],FLAG['CELL'],2][2],-1],
           {1,1}],  Print["  !!! Unstable orbit"]
    ]
  ]
]
];

CorStat[mon_,options___]:=Module[
{def={TrueOrbit->False,Last->{},Steer->{},print->True},op,str,hv,u,m,v,vlist},
op=Join[{options},def];
vlist=
   Join[
     If[TrueOrbit/.op,
       {RmsReport[Twiss["dx",mon[1]]],RmsReport[Twiss["dy",mon[1]]]}
     , {RmsReport[Twiss["dx",mon[1]]-LINE["dx",mon[4]]-mon[2,1]],
        RmsReport[Twiss["dy",mon[1]]-LINE["dy",mon[4]]-mon[2,2]]}
     ]
   , Map[RmsReport,[Twiss[{"ex","ey"},mon[1]]]] 
   ];
v=Map[ReplacePart[#,mon[1,#[4]],4]&, vlist];
$FORM="10.7";
If[print/.op,
  Print[" _____ Orbit Statistics (",If[TrueOrbit/.op,"True Orbit","BPM"],") [mm,mrad] _________",
        "________________________________________________________________________"];
  Print["       x_rms     x_max     at       y_rms     y_max     at       Ex_rms    Ex_max    at       Ey_rms    Ey_max    at"];
  Print[" Now "//StringStatMon[v[1]]//StringStatMon[v[2]]//StringStatMon[v[3]]//StringStatMon[v[4]]];
  If[~SameQ[Last/.op,{}],vlist=(Last/.op)[1];
    Print[" Last"//StringStatMon[vlist[1]]//StringStatMon[vlist[2]]//StringStatMon[vlist[3]]//StringStatMon[vlist[4]]]
  ]
];
str=Steer/.op;
If[~SameQ[str,{}],
  u=Table[
      hv=Select[Range[Length[str[1]]],str[3,#]==i&];
      If[hv=={}
      , {0,0,0,0}
      , m=RmsReport[ LINE["K0",str[1][hv]] ][4];
        ReplacePart[RmsReport[ LINE["K0",str[1][hv]] ],str[1,hv[m]],4]
      ]
    , {i,1,0,-1}];
  If[print/.op,
   !Print[" ----- Steers Statistics [mrad] ---------------------------------------------------"];
    Print[" Ste:  H_rms     H_mean    H_max     at       V_rms     V_mean    V_max     at"];
    Print[" Now "//StringStatSte[u[1]]//StringStatSte[u[2]]];
    If[~SameQ[(Last/.op),{}],
      If[~SameQ[(Last/.op)[2],{}],vlist=(Last/.op)[2];
        Print[" Last"//StringStatSte[vlist[1]]//StringStatSte[vlist[2]]]
      ]
    ]
  ]
];
$FORM=" ";
If[SameQ[str,{}],{v,{}},{v,u}]
];

ReadMonitorData[file_,trimlevel_:-1]:=Module[
  {lf,j,m,bpm={}},
  lf=OpenRead[file];
  While[UnsameQ[(m=Read[lf,Word]),EndOfFile],
    If[UnsameQ[j=LINE["position",m],{}],
      Twiss["dx",j]=ToExpression[Read[lf,Word]];
      Twiss["dy",j]=ToExpression[Read[lf,Word]];
      bpm=Append[bpm,j]
    , Read[lf,String]
      ]
    ];
  Close[lf];
  If[SameQ[trimlevel,-1],
    {Monitor[bpm],Twiss[{"dx","dy"},bpm]},
    ChopMonitorData[{Monitor[bpm],Twiss[{"dx","dy"},bpm]},trimlevel]
  ]
];

ChopMonitorData[data_,level_]:=Module[
  {rx,ry,index,lv},
  lv=Abs[If[VectorQ[level,NumberQ],level,{level,level}]];
  If[Length[data]<>2        ! if data is monitordata.
  , ChopMonitorData[{data,Twiss[{"dx","dy"},data[1]]},level]
  , rx=Sqrt[Apply[Plus,data[2,1]^2]/Length[data[2,1]]-(Apply[Plus,data[2,1]]/Length[data[2,1]])^2]*lv[1];
    ry=Sqrt[Apply[Plus,data[2,2]^2]/Length[data[2,2]]-(Apply[Plus,data[2,2]]/Length[data[2,2]])^2]*lv[2];
    index=Select[Range[Length[data[1,1]]],(Abs[data[2,1,#]]<rx && Abs[data[2,2,#]]<ry)&];
    MapAt[Part[#,index]&,data,{{1,1},{1,2,1},{1,2,2},{1,4},{2,1},{2,2}}]
  ]
];

SubMonitorData[a_,b_,trimlevel_:-1]:=Module[
  {ic,id,n,a1,b1,c},
  ic=Intersection[a[1,1],b[1,1]];
  id=Table[If[MemberQ[ic,a[1,1,i]],a[1,1,i],a[1,1,i]+1000000],{i,Length[a[1,1]]}];
  n=Apply[Plus,Map[If[#<1000000,1,0]&,id]];
  a1=Table[Map[Part[#,2]&,Take[Sort[Thread[{id,a[2,i]}]],n]],{i,Length[a[2]]}];
  id=Table[If[MemberQ[ic,b[1,1,i]],b[1,1,i],b[1,1,i]+1000000],{i,Length[b[1,1]]}];
  n=Apply[Plus,Map[If[#<1000000,1,0]&,id]];
  b1=Table[Map[Part[#,2]&,Take[Sort[Thread[{id,b[2,i]}]],n]],{i,Length[b[2]]}];
  c=a1-b1;
  Do[Twiss["dx",ic[i]]=c[1,i];Twiss["dy",ic[i]]=c[2,i],{i,Length[ic]}];
  If[SameQ[trimlevel,-1],
    {Monitor[ic],c},
    ChopMonitorData[{Monitor[ic],c},trimlevel]
  ]
];

WriteMonitorData[file_,mon_]:=Module[
  {lf,rx,ry},
  lf=OpenWrite[file];
  Do[Write[lf,NameSuffixed[LINE["name",mon[1,i]]]," ",Twiss["dx",mon[1,i]]," ",Twiss["dy",mon[1,i]]],{i,Length[mon[1]]}];
  rx=RmsReport[Twiss["dx",mon[1]]];
  ry=RmsReport[Twiss["dy",mon[1]]];
  $FORM="10.6";
  Write[lf,"! rms_X= ",rx[1]," mean_X= ",rx[2]," max_X= ",rx[3]," imax_X= ",LINE["name",mon[1,rx[4]]]];
  Write[lf,"! rms_Y= ",ry[1]," mean_Y= ",ry[2]," max_Y= ",ry[3]," imax_Y= ",LINE["name",mon[1,ry[4]]]];
  Flush[lf]; Close[lf];$FORM=" "
];

ReadSteerData[file_]:=Module[
  {lf,j,m,str={}},
  lf=OpenRead[file];
  While[UnsameQ[(m=Read[lf,Word]),EndOfFile],
    If[UnsameQ[j=LINE["position",m],{}],
      LINE["k0",j]=ToExpression[Read[lf,Word]];
      str=Append[str,j]
    , Read[lf,String]
    ]
  ]; Close[lf];
  {Steer[str],LINE["k0",str]}
];

ChopSteerData[data_,level_]:=Module[
  {index,lv},
  lv=Abs[If[VectorQ[level,NumberQ],level,{level,level}]];
  If[Length[data]<>2        ! if data is steerdata.
  , ChopSteerData[{data,LINE["k0",data[1]]}]
  , index=Select[Range[Length[data[1,1]]], Abs[data[2,#]]<Part[lv,1+data[1,3,#]]&];
    MapAt[Part[#,index]&,data,{{1,1},{1,2},{1,3},{1,4},{2}}]
  ]
];

WriteSteerData[file_,str_]:=Module[
  {lf,v,h,rh,rv},
  lf=OpenWrite[file];
  v=Select[Sort[Table[If[str[3,i],str[1,i]+10000,str[1,i]],{i,Length[str[1]]}]],#<10000&];
  h=Complement[str[1],v];  
  Do[Write[lf,NameSuffixed[LINE["name",h[i]]]," ",LINE["K0",h[i]]],{i,Length[h]}];
  Do[Write[lf,NameSuffixed[LINE["name",v[i]]]," ",LINE["K0",v[i]]],{i,Length[v]}];
  rh=RmsReport[LINE["K0",h]];
  rv=RmsReport[LINE["K0",v]];
  If[rh[3]<=>Null,Write[lf,"! rms_H= ",rh[1]," mean_H= ",rh[2]," max_H= ",rh[3]," imax_H= ",LINE["name",h[rh[4]]]]];
  If[rv[3]<=>Null,Write[lf,"! rms_V= ",rv[1]," mean_V= ",rv[2]," max_V= ",rv[3]," imax_V= ",LINE["name",v[rv[4]]]]];
  Flush[lf]; Close[lf]
];

RmsReport[a_]:=
{Sqrt[Apply[Plus,a^2]/Length[a]-(Apply[Plus,a]/Length[a])^2],
 Apply[Plus,a]/Length[a],
 If[Max[Abs[Max[a]],Abs[Min[a]]]==Max[a],Max[a],Min[a]],
 If[Max[Abs[Max[a]],Abs[Min[a]]]==Max[a],Position[a,Max[a]][1,1],Position[a,Min[a]][1,1]]};

StringStatMon[vx_]:=vx[1]*1e3//vx[3]*1e3//" "//LINE["name",vx[4]]//Spaces[8-Len[LINE["name",vx[4]]]];

StringStatSte[vx_]:=
 vx[1]*1e3//vx[2]*1e3//vx[3]*1e3//" "//If[vx[4]==0,"***",LINE["name",vx[4]]]//Spaces[8-Len[If[vx[4]==0,"***",LINE["name",vx[4]]]]];

Spaces[w_]:=Nest[StringJoin[#," "]&,"",Max[0,w]];

NameSuffixed[a_]:=If[StringPosition[a,"."]=={},a//".1",a];

HorizontalQ[ele_]:=Module[{angle,qp1=Pi/4,qp3=3*Pi/4},
  angle=If[VectorQ[ele],Abs[MapThread[Mod,{LINE["rotate",ele],Pi}]],Abs[Mod[LINE["rotate",ele],Pi]]];
  If[VectorQ[ele], Map[#<qp1 || #>qp3&,angle], angle<qp1 || angle>qp3]
];

Chop[x_,dx_:1e-10]:=If[VectorQ[x,ComplexQ],Map[If[Abs[Re[#]]<dx,0,Re[#]]+If[Abs[Im[#]]<dx,0,Im[#]]&,x]];
Chop[x_,dx_:1e-10]:=If[VectorQ[x,NumberQ],Map[If[Abs[#]<dx,0,#]&,x]];
Chop[x_,dx_:1e-10]:=
If[NumberQ[x],If[ComplexQ[x],If[Abs[Re[x]]<dx,0,Re[x]]+If[Abs[Im[x]]<dx,0,Im[x]*I],If[Abs[x]<dx,0,x]],Map[Chop[#,dx]&,x]];

Protect[NearestElement,NearestMonitors,Monitor,Steer,DeleteSteer,DeleteMonitor,SelectSteer,SelectMonitor,
DeleteMonitorDataRegion,DeleteMonitorRegion,CurrentSteers,ResetSteers,RecoverSteers,CorStat,
ReadMonitorData,ChopMonitorData,SubMonitorData,WriteMonitorData,ReadSteerData,ChopSteerData,WriteSteerData,RmsReport,
StringStatMon,StringStatSte,Spaces,NameSuffixed,Chop];
