CorrectOrbit[orbitkind_,mon_,str_,opt_,options___]:=
  Module[
    {istr,x,kind,a,b,c,w,a1,b1,solv,nx,as,bs,etre,x0,u,wi,v,mid,sid,midfile,sidfile,Threshold,xm,wm,
      cweigh,cw,xcw,cwd,ncut,ycut,yc,x1,aic,xx,f,goldsect,goldmin,
      def={Orbit->{},SetSteer->True,Calc->True,Solver->"LeastSquare",MomentumCorrection->False,
        Condition->{},Weight->Automatic,CorrectorWeight->Automatic,MomentumWeight->1,AppendEq->{},
        ExpectedOrbit->False,ZeroSum->False,TotalKick->{Null,Null},TotalDZ->Null,DN->{Null,Null},
        MomentumCompaction->Null,Bump->{},SVDmode->0,ResetMatrix->False,
        SaveMatrixOnFile->StringQ[$MatrixDir],MatricesOnMemory->10,Tune->{0,0},Epsilon->1e-8,
        ThresholdExponent->1,OrbitThreshold->0},
      syno={EPS->Epsilon,MonitorWeight->Weight,DTune->DN}, op},
    op=Join[{options},def]/.syno;
    solv=Solver/.op;
    Threshold=Epsilon/.op;
    $CorAlpha=(MomentumCompaction/.op);
    If[(ResetMatrix/.op),Clear[$CorSV]];
    istr=str[[1]];
    kind=If[VectorQ[orbitkind],Union[orbitkind],{orbitkind}];
    cweigh=CorrectorWeight/.op;  (* K. Oide 3/21/2001 *)
    cw=If[cweigh<=>Automatic,
      If[VectorQ[cweigh,NumberQ],cweigh,cweigh/@istr],
      Table[1,{Length[istr]}]];
    cwd=Sqrt[
      (Plus@@Optik[opt,1,mon[[1]],2])*(Plus@@Optik[opt,1,istr,2])/Length[istr]/(Plus@@Optik[opt,1,mon[[1]],7]^2)
      ];(*default weight, Sqrt by K. Oide*)
    cwd=cwd*(Plus@@cw)/Length[cw];
    If[MomentumCorrection/.op,cw=Append[cw,cwd*(MomentumWeight/.op)]];
    {a,b,c,w}=If[SameQ[Bump/.op,{}],
      CorrectSingleKick[kind,mon,str,cw,opt,op],
      CorrectOrbitBump[kind,mon,str,opt,op]
      ];
    If[ExpectedOrbit/.op, as=a;bs=b];
    If[~SameQ[(AppendEq/.op),{}],
      {a1,b1}=(AppendEq/.op);
      a=Join[a,a1]; b=Join[b,b1]
      ];

    nx=If[solv==="LeastSquare",0,If[VectorQ[solv] && solv[[1]]=="Micado",solv[[2]],Length[istr] ]];
    Switch[(SVDmode/.op),
      0, If[c=={},
        x=LinearSolveConditioned[a,b,Epsilon/.op,nx,True],
        x=LinearSolveConditioned[a,b,Epsilon/.op,nx,True,c[[1]],c[[2]]]
        ],
      1, If[SaveMatrixOnFile/.op,SetDirectory[$MatrixDir]];
      {etre,mid,sid,midfile,sidfile}=RecallMatrix[kind,LINE["name",mon[[1]]],LINE["name",istr], SaveMatrixOnFile/.op ];
      (*Print[{etre,mid,sid,midfile,sidfile}];*)
      If[ etre ,
        $CorSV["use",kind,mid,sid]=$CorSV["use",kind,mid,sid]+10;
        x0=If[c=={},Table[0,{Length[a[[1]]]}],LinearSolve[ c[[1]],c[[2]] ]];
        (*x=Dot[$CorSV[kind,mid,sid],b-a.x0]+x0*)
        {u,wi,v}=$CorSV[kind,mid,sid];
        wm=Max[wi]*Threshold;
        ncut=ThresholdExponent/.op;
        ycut=OrbitThreshold/.op;
        If[wm,
!         wi=If[#<wm,#/wm^2,1/#]&/@wi,
          wi=If[#<wm,(#/wm)^ncut/wm,1/#]&/@wi,
          wi=0*wi];
        x=u.(b-a.x0);
        If[ycut===Automatic,
          xx=Sort[Abs[x]];
          f[i_]:=(Plus@@(b-a.(Transpose[v].(wi*(If[Abs[#]<xx[[i]],0,#]&/@x))+x0))^2/Max[mon[[3]]]^2
            + 2*(Length[x]-i+1));
          aic=Table[{f[i],i,xx[[i]]}, {i,Length[x]}];
          ycut=Sort[aic][[1,3]]/Max[Abs[x]];
          Print["aic=",aic]; 

!       (*  goldsect[{a1_,b1_,c1_,fb_}]:=Module[{R=GoldenRatio-1,C=2-GoldenRatio,a,b,c,d,fd},
!           {a,b,c}=If[Abs[c1-b1]>Abs[b1-a1],{a1,b1,c1},{c1,b1,a1}];
!           d=Round[R*b+C*c];
!           fd=f[d];If[fd<fb,Print[{b,d,c,fd}],Print[{a,b,d,fb}]];
!           If[fd<fb,{b,d,c,fd},{a,b,d,fb}]  ];
!         goldmin[{a1_,b1_},{min_,max_},itmax_,gmax_]:=Module[{a,b,c,fb,min1,max1,g,g1,g2},
!           {b,a}=Max[min,Min[max,#]]&/@If[f[a1]<f[b1],{a1,b1},{b1,a1}];
!           While[c=Max[min,Min[max,Round[b+GoldenRatio*(b-a)]]];(fb=f[b])>f[c],{a,b}={b,c}];
!           g=If[ b==c, {fb,b}, FixedPoint[goldsect,{a,b,c,f[b]},itmax,SameTest->(Drop[#1,-1]==Drop[#2,-1]&)][[{4,2}]] ];
!           (*Print["g,gmax=",g,gmax];*)
!           If[g[[1]]<gmax[[1]],
!             {min1,max1}=Round[{min,(min+max)*.5}];Print[{min1,max1}];
!             g1=goldmin[Round[{1-#,#}.{min1,max1}&/@{.125,.25}],{min1,max1},itmax,g];
!             {min1,max1}=Round[{(min+max)*.5,max}];Print[{min1,max1}];
!             g2=goldmin[Round[{1-#,#}.{min1,max1}&/@{.125,.25}],{min1,max1},itmax,g];
!             Sort[{g,g1,g2}][[1]],
!             gmax]
!           ];
!         yc=goldmin[Round[{1-#,#}.{1,Length[x]}&/@{.125,.25}],{1,Length[x]},Length[x],{Infinity,1}][[2]];
!         ycut=xx[[yc]]/Max[Abs[x]] *)
            ];
        Print["ycut=",ycut];
        If[ycut<=>0,
          xm=Max[Abs[x]]*ycut;
          x=If[Abs[#]<xm,0,#]&/@x];
        x=wi*x;
        x=Transpose[v].x+x0
        , (*Print["  -CorrectOrbit:new matrix: Explicit SVD"];*)
        $CorSV["use",kind,mid,sid]=100;
        $CorSV[kind,"Matrices"]=If[Head[$CorSV[kind,"Matrices"]]===$CorSV,1,$CorSV[kind,"Matrices"]+1];
        If[c=={},
          $CorSV[kind,mid,sid]=LinearSolveConditionedS[a,b,Epsilon/.op,nx,True,c,c,op],
          $CorSV[kind,mid,sid]=LinearSolveConditionedS[a,b,Epsilon/.op,nx,True,c[[1]],c[[2]],op]
          ];
!       Print["  -CorrectOrbit:saved on memory ",{kind,mid,sid}," Matrices=",$CorSV[kind,"Matrices"]];
        If[ SaveMatrixOnFile/.op, 
          WriteMatrixOnFile[ kind,midfile,sidfile,LINE["name",mon[[1]]],LINE["name",istr],$CorSV[kind,mid,sid]] ];
        If[$CorSV[kind,"Matrices"]>(MatricesOnMemory/.op),DeleteMatrix[kind,(MatricesOnMemory/.op)]];
        Return[CorrectOrbit[orbitkind,mon,str,opt,ResetMatrix->False,options]]
        ];

      Print["  -CorrectOrbit:Matrices on memory for "//kind//"=",$CorSV[kind,"Matrices"]];
      $CorSV["time"]=If[Head[$CorSV["time"]]===$CorSV,0,$CorSV["time"]+1];
      $CorSV["time",kind,mid,sid]=$CorSV["time"];
      MatrixCounter[kind]
      ];
    xcw=-x*cw;
    If[SetSteer/.op,AddSteerStrength[Take[xcw,Length[istr]],str,Length[kind]==1&&kind[-1]=="Y"]];
    If[ExpectedOrbit/.op, b=(bs-as.
      Take[x,Length[istr]+If[MomentumCorrection/.op,1,0,0]])/w;
      nx=Length[b]/Length[kind];
      Do[ 
        Twiss[If[kind[[i]][1]=="E",kind[[i]],"D"//kind[[i]]],mon[[1,j]]]=b[[j+nx*(i-1)]]
        , {i,Length[kind]}, {j,nx} ] ];
    If[(Calc/.op)&&~(ExpectedOrbit/.op)&&FLAG["SIMULATE"], 
      FFS["CALC NOEXP;"];
      If[FLAG["CELL"],
        If[ ~Equal[Drop[ CalculateOptics[1,LINE["LENGTH"],Twiss["*",1],FLAG["CELL"],2][[2]], -1],{1,1}],
          Message[Corr::unstable] ]  ]
      ];
    xcw
    ];

CorrectSingleKick[kind_,mon_,str_,cw_,opt_,op_]:=Module[
  {imon,orb,weigh,p,pp,aa,el,ww,
    o={2,2,5,5,2,2,5,5},bb,t={"DX","DPX","DY","DPY","EX","EPX","EY","EPY"},a={},b={},c,w={}},
  orb=Orbit/.op; If[~SameQ[orb,{}]&&VectorQ[orb],orb={orb}];
  weigh=Weight/.op;
  imon=mon[[1]];
  Do[p=Position[{"X","PX","Y","PY","EX","EPX","EY","EPY"},kind[i]];
    If[~SameQ[p,{}],
      pp=p[[1,1]];
      aa=ResponseMatrixG[imon,str,opt,FLAG["CELL"],kind[[i]],Tune/.op,
        MomentumCorrection->(MomentumCorrection/.op)];
      ww=If[weigh===Automatic,Sqrt[ Optik[opt,1,imon,o[[pp]]] ],
        If[VectorQ[weigh,NumberQ],weigh,Map[weigh,imon]]];
      aa*=ww;
      aa=(#*cw)&/@aa;
      bb=If[orb=={},
           If[pp==1 || pp==3,
             If[mon[[3,(1+pp)/2]]==0||FLAG["OPERATE"],
               Twiss[t[[pp]],imon]-LINE[t[[pp]],mon[[4]]]-mon[[2,(1+pp)/2]],
               Twiss[t[[pp]],imon]-LINE[t[[pp]],mon[[4]]]-mon[[2,(1+pp)/2]]+
                 mon[[3,(1+pp)/2]]*Table[GaussRandom[],{Length[imon]}]
               ],
!            Twiss[t[[pp]],imon]-LINE[t[[pp]],mon[[4]]]
             Twiss[t[[pp]],imon]
             ],
           orb[[i]]];
      bb*=ww;
      a=Append[a,aa];
      b=Append[b,bb];
      w=Append[w,ww];
    ],{i,Length[kind]}
  ];
  a=Flatten[a,1];
  b=Flatten[b,1];
  w=Flatten[w,1];

  c=SteerConditions[str,opt,op];
  If[c<=>{},
    If[MomentumCorrection/.op, c[[1]]=Append[#,0]&/@c[[1]]];
    c[[1]]=(#*cw)&/@c[[1]]];
  {a,b,c,w}
];

SteerConditions[str_,opt_,op_]:=Module[{istr,c,tt},
  c=Condition/.op; 
  istr=str[[1]];
  If[~SameQ[c,{}],
    If[~VectorQ[c[[-1]],NumberQ],
        c=MakeConditionMatrix[If[NumberQ[c[[-1]]],{c},c],istr]
      ]
    ];
  If[(ZeroSum/.op)||UnsameQ[TotalKick/.op,{Null,Null}],
    tt=If[(ZeroSum/.op),{0,0},TotalKick/.op];
    If[c=={},c={{},{}}];
    If[ NumberQ[tt[[1]]], c=MapThread[ Append,{c,{str[[3]],tt[[1]]}} ] ];
    If[ NumberQ[tt[[2]]], c=MapThread[ Append,{c,{1-str[[3]],tt[[2]]}} ] ];
    ];
  If[NumberQ[TotalDZ/.op],
    tt=(TotalDZ/.op);
    If[c=={},c={{},{}}];
    c=MapThread[ Append,{c,{Table[Optik[opt,1,istr[[i]],If[str[[3,i]],7,9]],{i,Length[istr]}],tt}} ]
    ];
  If[UnsameQ[DN/.op,{Null,Null}],
    If[c=={},c={{},{}}];
    c=MapThread[ Join,{c,TuneConstraint[DN/.op,str,opt,op]} ]
    ];
  c]

!TuneConstraint[{dnx_,dny_},str_,opt_,op_]:=Module[{sext,r,b,c={{},{}}},
!  sext=Select[LINE["position","*"],LINE["type",#]==6||LINE["type",#]==22&];  ! type=22 for MULT
!  sext=Select[sext,LINE["K2",#]<>0&];
!  If[sext=={},Return[c]];
!  r=ResponseMatrixG[sext,str,opt,FLAG["CELL"],"X",Tune/.op];
!  If[NumberQ[dnx],
!    b=Plus@@((LINE["K2",sext]*Optik[opt,1,sext,2])*r)/(4*Pi);
!    c=MapThread[ Append, {c,{b,dnx}} ]
!    ];
!  If[NumberQ[dny],
!    b=Plus@@((LINE["K2",sext]*Optik[opt,1,sext,5])*r)/(4*Pi);
!    c=MapThread[ Append, {c,{b,-dny}} ]
!    ];
!  c
!];

TuneConstraint[{dnx_,dny_},str_,opt_,op_]:=Module[{sext,ls,k2,x,p,ax,bx,gx,ay,by,gy,a1,a2,b,c={{},{}}},
  sext=Select[LINE["position","*"],LINE["type",#]==6||LINE["type",#]==22&];  ! type=22 for MULT
  sext=Select[sext,LINE["K2",#]<>0&];
  If[sext=={},Return[c]];
  ls=LINE["L",sext];
  k2=LINE["K2",sext];
  x=ResponseMatrixG[sext,str,opt,FLAG["CELL"],"X",Tune/.op];
  p=ResponseMatrixG[sext,str,opt,FLAG["CELL"],"PX",Tune/.op];
  ax=Optik[opt,1,sext,1];
  bx=Optik[opt,1,sext,2];
  gx=(1+ax^2)/bx;
  ay=Optik[opt,1,sext,4];
  by=Optik[opt,1,sext,5];
  gy=(1+ay^2)/by;
  If[NumberQ[dnx],
    a1=(bx-ax*ls+gx*ls^2/3)*k2;
    a2=(bx/2-2*ax*ls/3+gx*ls^2/4)*ls*k2;
    b=(Plus@@(a1*x)+Plus@@(a2*p))/(4*Pi);
    c=MapThread[ Append, {c,{b,dnx}} ]
    ];
  If[NumberQ[dny],
    a1=(by-ay*ls+gy*ls^2/3)*k2;
    a2=(by/2-2*ay*ls/3+gy*ls^2/4)*ls*k2;
    b=(Plus@@(a1*x)+Plus@@(a2*p))/(4*Pi);
    c=MapThread[ Append, {c,{b,-dny}} ]
    ];
  c
];

CorrectLocal[kind_,region_,mon_,str_,opt_,options___]:=Module[
  {op,section,sectZ,from,to,index,ind,indA,n1,n2,strSelected,monSelected,wc,kindClose,c={},d,dx,x,
!  def={WhatClosed->{},Tune->{0,0}},sigleplane,hor,vlist,zlist,a1,b1},
   def={WhatClosed->{},DecayMon->{1,1},Tune->{0,0}}},
  op=Join[{options},def];
  section=LINE["position",region];
  {from,to}=section;
 !.. select correctors ..
  index=Select[Range[Length[str[[1]]]],BelongToSection[str[1,#],section]&];
 !strSelected=Map[Part[#,index]&,str];
  strSelected=str[[,index]];
  sectZ=If[from<=to
        ,  strSelected[[1,{1,-1}]]
        ,  If[Max[strSelected[[1]]]>=from
           ,  {Min[Select[strSelected[[1]],#>=from&]],Max[Select[strSelected[[1]],#<=to&]]}
           ,  strSelected[[1,{1,-1}]]
           ]
        ];
  ind =Select[Range[Length[mon[[1]]]],BelongToSection[mon[[1,#]],sectZ]&];
  indA=If[from<=to
        , ind
        , If[Max[mon[[1,ind]]]>=from
          , Join[Select[ind,mon[[1,#]]>=from&],Select[ind,mon[[1,#]]<=to&]]
          , ind
          ]
        ];
  {n1,n2}=DecayMon/.op;
  ind=Sort[Table[indA[[i]],{i,1+n1,Length[indA]-n2}]];
  monSelected=MapAt[Part[#,ind]&,mon,{{1},{2,1},{2,2},{4}}];
  wc=WhatClosed/.op;
  kindClose=If[wc=={},kind,wc];
  kindClose=If[VectorQ[kindClose],kindClose,{kindClose}];
  If[wc=={},kindClose=Union[kindClose,CanonicalPartner/@kindClose]];
! Do[
!   If[wc=={}
!   , c=Append[c,ResponseMatrixG[to,strSelected,opt,FLAG["CELL"],kindClose[i],Tune/.op]];
!     If[~FLAG["CELL"],c=Append[c,ResponseMatrixG[from,strSelected,opt,FLAG["CELL"],kindClose[i],Tune/.op]]]
!   , c=Append[c,ResponseMatrixG[to,strSelected,opt,FLAG["CELL"],kindClose[i],Tune/.op]];
!     If[~MemberQ[kindClose,CanonicalPartner[kindClose[i]]] || ~FLAG["CELL"],
!       c=Append[c,ResponseMatrixG[from,strSelected,opt,FLAG["CELL"],kindClose[i],Tune/.op]]
!     ]
!   ], {i,Length[kindClose]}
! ];
  AppendTo[c,ResponseMatrixG[to,strSelected,opt,FLAG["CELL"],#,Tune/.op]]&/@kindClose;
  d=Table[0,{If[VectorQ[c],1,Length[c]]}];

  dx=CorrectOrbit[kind,monSelected,strSelected,opt,Condition->{c,d},options];
  x=ARRAY[Length[str[1]]];
  Do[x[index[i]]=dx[i],{i,Length[index]}];
  x
];

AddSteerStrength[x_,str_,yplane_:0]:=Module[{istr,slav,n,x1,kv},
  istr=str[[1]]; slav=str[[2]];
  x1=If[FLAG["OPERATE"],x,x*str[[4]]];
  Do[ 
    If[ istr[[i]]==slav[[i]],
      kv=If[yplane&&LINE["type",istr[[i]]]<>2,"SK0","K0"];
      LINE[kv,istr[[i]]]=LINE[kv,istr[[i]]]+x1[[i]],
      n=Apply[ Plus,
         Map[ LINE["element",#]==LINE["element",istr[[i]]]&, 
           Range[istr[[i]],slav[[i]]] ]
        ];
      Do[ If[ LINE["element",j]==LINE["element",istr[[i]]], 
        LINE[kv,j]=LINE[kv,j]+x1[[i]]/n],
        {j,istr[[i]],slav[[i]]} ]
      ],
    {i,Length[istr]}
    ]
];

ResponseMatrixG[mon_,str_,opt_,periodic_,kind_,tune_:{0,0},options___]:=Module[
  {a={},aa,k,el,ee,r,t,e1,ex,epx,em,def={MomentumCorrection->False},op},
  op=Flatten[Join[{options},def]];
  k=If[VectorQ[kind],kind,{kind}];
  Do[a=Join[a,
    If[k[[i]][1]=="E",
  (*--Dispersion---*)
      If[Depth[opt]<>5,
        Message[ResponseMatrixG::optdata];Break[]
      ];
      el=Sort[Thread[{Part[opt,{1,2,3},1,1,21],{1,2,3}}]];
      (ResponseMatrix[mon,str[[1]],str[[2]],opt[[ el[[3,2]] ]],
        FLAG["CELL"],k[[i]][2,-1],tune]-
          ResponseMatrix[mon,str[[1]],str[[2]],opt[[ el[[1,2]] ]],
            FLAG["CELL"],k[[i]][2,-1],tune])/(el[[3,1]]-el[[1,1]])-
              ResponseMatrix[mon,str[[1]],str[[2]],opt[[ el[[2,2]] ]],
                FLAG["CELL"],k[[i]][2,-1],tune],
  (*--Orbit---*)
      em=Optik[opt,1,mon,6+Position[{"X","PX","Y","PY"},k[[i]],1,1][[1,1]]];
      If[Head[$CorAlpha]<=>Symbol && ?CELL,
        ee=Map[
          If[ LINE["angle",str[[1,#]]]==0,
            Optik[opt,1,str[[1,#]],9-2*str[[3,#]]] + LINE["L",str[[1,#]]]/2*Optik[opt,1,str[[1,#]],10-2*str[[3,#]]],
            {r,t,e1}=LINE[{"L","angle",If[LINE["dir",str[[1,#]]],"e1","e2"]},str[[1,#]]];
            r=r/t;
            e1=t*e1;
            ex=Optik[opt,1,str[[1,#]],9-2*str[[3,#]]];
            epx=Optik[opt,1,str[[1,#]],10-2*str[[3,#]]];
            r+(ex-r)*Sin[t]/t+2*Sin[t/2]^2/t*(r*epx+ex*Tan[e1])
            ]&, Range[Length[str[[1]]]] ];
        aa=ResponseMatrix[mon,str[[1]],str[[2]],Optik[opt],FLAG["CELL"],k[[i]],tune]-
          Outer[Times,em,ee]/(LINE["s","$$$"]*$CorAlpha);
        aa=MapThread[(#1+#2*str[[3]])&,{aa,em/(2*Pi)}],
!        Print["RMG ",{i,k[[i]],tune}];
        aa=ResponseMatrix[mon,str[[1]],str[[2]],Optik[opt],FLAG["CELL"],k[[i]],tune]      ];
      If[MomentumCorrection/.op,MapThread[Append[#1,#2]&,{aa,em}],aa]
     ] ], {i,Length[k]}];
  a];

(*
MakeConditionMatrix[cond_,istr_]:=
{Table[
  Table[
    Catch[
      Do[ 
        If[istr[[k]]==LINE["POSITION",cond[[i,1,j]]],
          Throw[cond[[i,2,j]]]],
        {j,Length[cond[[i,1]]]}];0],
    {k,Length[istr]}],
  {i,Length[cond]}],
  Table[cond[[i,3]],{i,Length[cond]}]};
*)
MakeConditionMatrix[cond_,istr_]:=Module[{v},
  {(Clear[v];
    v[_]=0;
    ScanThread[(v[LINE["POSITION",#]]=#2)&,Drop[#,-1]];
    v/@istr)&/@cond,
    cond[[,3]]}];

RecallMatrix[kv_,bpm_,st_,usefile_]:=Module[
  {monsetmax,strsetmax,mid,monsetmaxfile,midfile=-1,sid,strsetmaxfile,sidfile=-1,lo,filenames,a,a1},
  monsetmax=If[Head[$CorSV["monsetmax"]]===$CorSV,$CorSV["monsetmax"]=0,$CorSV["monsetmax"]];
  strsetmax=If[Head[$CorSV["strsetmax"]]===$CorSV,$CorSV["strsetmax"]=0,$CorSV["strsetmax"]];
  mid=Catch[Do[If[$CorSV["monset",i]===bpm,Throw[i]],{i,monsetmax}];Throw[monsetmax+1]];
  sid=Catch[Do[If[$CorSV["strset",i]===st,Throw[i]],{i,strsetmax}];Throw[strsetmax+1]];
  If[mid<monsetmax+1 && sid<strsetmax+1,
    If[Head[$CorSV[kv,mid,sid]]===List,
!     Print["  -CorrectOrbit:found in the memory ",{kv,mid,sid},",",{monsetmax,strsetmax}];
      Return[{True,mid,sid,midfile,sidfile}] ]
    ];
  If[usefile,
    monsetmaxfile=Check[Get["MaxMonset"],0,General::fileopen];
    strsetmaxfile=Check[Get["MaxStrset"],0,General::fileopen];
    midfile=Catch[Do[
      If[Get["CorSV[\"monset\","//i//"]"]===bpm,Throw[i]],{i,monsetmaxfile}
      ];Throw[0]];
    sidfile=Catch[Do[
      If[Get["CorSV[\"strset\","//i//"]"]===st,Throw[i]],{i,strsetmaxfile}
      ];Throw[0]]
    ];
  If[mid==monsetmax+1,
    $CorSV["monsetmax"]=mid;
    $CorSV["monset",mid]=bpm];
  If[sid==strsetmax+1,
    $CorSV["strsetmax"]=sid;
    $CorSV["strset",sid]=st];
  !Print["monsetmax,strsetmax,midfile,sidfile=",monsetmax,",",strsetmax,",",midfile,",",sidfile];
  If[midfile>0&&sidfile>0,
    lo=OpenRead["filename_list"];
    filenames=If[lo===$Failed,{},a={};While[UnsameQ[a1=Read[lo,String],EndOfFile],AppendTo[a,a1]];a];
    If[MemberQ[filenames,"CorSV["//kv//","//midfile//","//sidfile//"]"],
!     Print["  -CorrectOrbit:found in file ",$MatrixDir//"CorSV["//kv//","//midfile//","//sidfile//"]"];
      $CorSV[kv,mid,sid]=Get["CorSV["//kv//","//midfile//","//sidfile//"]"];
!     Print["  -CorrectOrbit:extracted to memory ","$CorSV["//kv//","//mid//","//sid//"]"];
      Return[{True,mid,sid,midfile,sidfile}]
    , Return[{False,mid,sid,midfile,sidfile}]
      ]
  , Return[{False,mid,sid,midfile,sidfile}]
  ];
];

DeleteMatrix[kind_,MatricesOnMemory_]:=Module[{p,q},
  q=Flatten[ Outer[List,Range[$CorSV["monsetmax"]],Range[$CorSV["strsetmax"]]], 1];
  p=Flatten[ Outer[If[Head[$CorSV[kind,#1,#2]]===$CorSV,1e30,$CorSV["use",kind,#1,#2]]&,
    Range[$CorSV["monsetmax"]],Range[$CorSV["strsetmax"]]] ];
  p=Sort[Thread[{p,q}]];
  (*$FORM="S6.3";Print["  -CorrectOrbit:Current matrices:",p];*)
  p=Take[p,$CorSV[kind,"Matrices"]-MatricesOnMemory];
  (*Print["  -CorrectOrbit:Delete matrices:",p];$FORM=" ";*)
  Scan[With[{a=#[[2,1]],b=#[[2,2]]},Clear[$CorSV[kind,a,b],$CorSV["use",kind,a,b]]]&,p];
  $CorSV[kind,"Matrices"]=MatricesOnMemory
];

MatrixCounter[kind_]:=Module[{p,q},
  q=Flatten[ Outer[List,Range[$CorSV["monsetmax"]],Range[$CorSV["strsetmax"]]], 1];
  p=Flatten[ Outer[If[Head[$CorSV[kind,#1,#2]]===$CorSV,1e30,$CorSV["time",kind,#1,#2]]&,
    Range[$CorSV["monsetmax"]],Range[$CorSV["strsetmax"]]] ];
  p=Take[Sort[Thread[{p,q}]],$CorSV[kind,"Matrices"]];(*Print[p];*)
  Scan[($CorSV["use",kind,#[[2,1]],#[[2,2]]]=$CorSV["use",kind,#[[2,1]],#[[2,2]]]*Exp[(#[[1]]-$CorSV["time"])/100])&, p]
]  

WriteMatrixOnFile[ kind_,midfile_,sidfile_,bpm_,st_,ainv_]:=Module[
  {lo,monsetmaxfile,strsetmaxfile,m,s},
  monsetmaxfile=Check[Get["MaxMonset"],0,General::fileopen];
  strsetmaxfile=Check[Get["MaxStrset"],0,General::fileopen];
  If[midfile>0 , m=midfile
    , m=monsetmaxfile+1;
      Write[OpenWrite["MaxMonset"],m];
      Write[OpenWrite["CorSV[\"monset\","//m//"]"],bpm]
    ];
  If[sidfile>0 , s=sidfile
    , s=strsetmaxfile+1;
      Write[OpenWrite["MaxStrset"],s];
      Write[OpenWrite["CorSV[\"strset\","//s//"]"],st]
    ];
  lo=OpenWrite["CorSV["//kind//","//m//","//s//"]"];
  Write[lo,ainv];
(*Print["  -CorrectOrbit:save to file ","CorSV["//kind//","//m//","//s//"]"];*)
  lo=OpenAppend["filename_list"];
  Write[lo,"CorSV["//kind//","//m//","//s//"]"]
];

LinearSolveConditionedS[a_,b_,Threshold_,nx_,normalize_,c_,d_,op_]:=Module[{u,wi,v,c1,x0,a1},
  If[c=={},
    SingularValues[a,Tolerance->1e-15,Inverse->False]
  , 
    {u,wi,v}=SingularValues[Transpose[c],Inverse->False];
    x0=LinearSolve[c,d];
    c1=Delete[u,Position[wi,0,1]];
  (*a1=SchmidtDiagonalize[a,c1];*)
    a1=If[c1==={}, a, a-a.Transpose[c1].c1 ];
    SingularValues[a1,Tolerance->1e-15,Inverse->False]
    ]
  ];

PseudoInv[a_,e_]:=Module[{u,wi,v},{u,wi,v}=SingularValues[a,Tolerance->e];Transpose[v].DiagonalMatrix[wi].u];

CanonicalPartner[x_]:=Switch[x[1],"P",x[2,-1],"E","E"//CanonicalPartner[x[2,-1]],_,"P"//x];

Optik[opt_,a___]:=Module[{el},
  If[Depth[opt]==5,
    el=Sort[Thread[{Part[opt,{1,2,3},1,1,21],{1,2,3}}]];
    opt[[ el[[2,2]],a ]]
  , opt[[a]]
  ]
];
      
ResponseMatrixG::optdata="Insufficient optics data:\n"//
        "      ... Need optics triad {optics(dp0),optics(dp0+ddp),optics(dp0-ddp)}";
Corr::unstable="Unstable orbit";

Protect[CorrectOrbit,CorrectSingleKick,CorrectLocal,AddSteerStrength,
  ResponseMatrixG,MakeConditionMatrix,CanonicalPartner,Optik];

Get[PackagesDirectory//"bump.n"];
Get[PackagesDirectory//"corutility.n"];
